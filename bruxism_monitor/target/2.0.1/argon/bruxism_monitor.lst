
d:/dev-projects/bruxism_monitor/bruxism_monitor/target/2.0.1/argon/bruxism_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002c94  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6cb0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e570  000d6cb4  0001e570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000020c  2003e5e4  2003e5e4  0002e5e4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6d28  000d6d28  00026d28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6d50  000d6d50  00026d50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011afc0  00000000  00000000  00026d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013b76  00000000  00000000  00141d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027dc0  00000000  00000000  0015588a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000026c0  00000000  00000000  0017d64a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006ce8  00000000  00000000  0017fd0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000350fa  00000000  00000000  001869f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000318ba  00000000  00000000  001bbaec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001039b9  00000000  00000000  001ed3a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000691c  00000000  00000000  002f0d60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb23 	bl	d6678 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb45 	bl	d66c8 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e570 	.word	0x2003e570
   d4048:	000d6cb4 	.word	0x000d6cb4
   d404c:	2003e5e4 	.word	0x2003e5e4
   d4050:	2003e5e4 	.word	0x2003e5e4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fd99 	bl	d5b94 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6c84 	.word	0x000d6c84
   d407c:	000d6ca8 	.word	0x000d6ca8

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b861 	b.w	d4146 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f867 	bl	d4158 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bd43 	b.w	d5b18 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bb37 	b.w	d4704 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bb35 	b.w	d4704 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bb3b 	b.w	d4714 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 fa90 	bl	d45cc <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d43ad 	.word	0x000d43ad

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c4:	4770      	bx	lr

000d40c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c6:	6a00      	ldr	r0, [r0, #32]
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	68db      	ldr	r3, [r3, #12]
   d40cc:	4718      	bx	r3
	...

000d40d0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40d2:	b510      	push	{r4, lr}
   d40d4:	4604      	mov	r4, r0
   d40d6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40d8:	f000 fe5e 	bl	d4d98 <_ZN5spark10LogManager8instanceEv>
   d40dc:	4621      	mov	r1, r4
   d40de:	f001 f860 	bl	d51a2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40e2:	f001 fe5b 	bl	d5d9c <_Z16_fetch_usbserialv>
   d40e6:	f001 fe4d 	bl	d5d84 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d40ea:	4620      	mov	r0, r4
   d40ec:	4b04      	ldr	r3, [pc, #16]	; (d4100 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40ee:	f840 3b04 	str.w	r3, [r0], #4
   d40f2:	f000 ff43 	bl	d4f7c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}
   d40fa:	bf00      	nop
   d40fc:	000d6928 	.word	0x000d6928
   d4100:	000d6910 	.word	0x000d6910

000d4104 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
    }
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN5spark16SerialLogHandlerD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	2124      	movs	r1, #36	; 0x24
   d4110:	f002 fa9d 	bl	d664e <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4118:	b40e      	push	{r1, r2, r3}
   d411a:	b510      	push	{r4, lr}
   d411c:	b08d      	sub	sp, #52	; 0x34
   d411e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4120:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4122:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4126:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4128:	2300      	movs	r3, #0
   d412a:	2020      	movs	r0, #32
   d412c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4130:	e9cd 4200 	strd	r4, r2, [sp]
   d4134:	201e      	movs	r0, #30
   d4136:	aa04      	add	r2, sp, #16
   d4138:	f000 fa50 	bl	d45dc <log_message_v>
}
   d413c:	b00d      	add	sp, #52	; 0x34
   d413e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4142:	b003      	add	sp, #12
   d4144:	4770      	bx	lr

000d4146 <setup>:
SerialLogHandler serLog(LOG_LEVEL_WARN, {{"app", LOG_LEVEL_INFO}});

int forceSensorPin = A0;
int val = 0;

void setup() {
   d4146:	b508      	push	{r3, lr}

  // Start Serial
  Serial.begin(115200);
   d4148:	f001 fe28 	bl	d5d9c <_Z16_fetch_usbserialv>
}
   d414c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(115200);
   d4150:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4154:	f001 be12 	b.w	d5d7c <_ZN9USBSerial5beginEl>

000d4158 <loop>:


void loop() {
   d4158:	b508      	push	{r3, lr}
  
  val = analogRead(forceSensorPin);  // read the analogPin
   d415a:	4b08      	ldr	r3, [pc, #32]	; (d417c <loop+0x24>)
   d415c:	8818      	ldrh	r0, [r3, #0]
   d415e:	f002 fa19 	bl	d6594 <analogRead>
   d4162:	4b07      	ldr	r3, [pc, #28]	; (d4180 <loop+0x28>)
  Log.info("Force Analog Value: %i", val);
   d4164:	4907      	ldr	r1, [pc, #28]	; (d4184 <loop+0x2c>)
  val = analogRead(forceSensorPin);  // read the analogPin
   d4166:	6018      	str	r0, [r3, #0]
   d4168:	4602      	mov	r2, r0
  Log.info("Force Analog Value: %i", val);
   d416a:	4807      	ldr	r0, [pc, #28]	; (d4188 <loop+0x30>)
   d416c:	f7ff ffd4 	bl	d4118 <_ZNK5spark6Logger4infoEPKcz>
  delay(1000);

   d4170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(1000);
   d4174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4178:	f001 bc8c 	b.w	d5a94 <delay>
   d417c:	2003e570 	.word	0x2003e570
   d4180:	2003e60c 	.word	0x2003e60c
   d4184:	000d68ec 	.word	0x000d68ec
   d4188:	2003e638 	.word	0x2003e638

000d418c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d418c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d418e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4192:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4194:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4196:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d419a:	42ae      	cmp	r6, r5
   d419c:	d004      	beq.n	d41a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d419e:	4628      	mov	r0, r5
   d41a0:	f000 fb4e 	bl	d4840 <_ZN6StringD1Ev>
   d41a4:	3514      	adds	r5, #20
   d41a6:	e7f8      	b.n	d419a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d41a8:	6820      	ldr	r0, [r4, #0]
   d41aa:	f000 fab3 	bl	d4714 <free>
    AllocatorT::free(data_);
}
   d41ae:	4620      	mov	r0, r4
   d41b0:	bd70      	pop	{r4, r5, r6, pc}

000d41b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d41b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        if (n > 0) {
   d41b6:	f1b1 0800 	subs.w	r8, r1, #0
    bool realloc(int n) {
   d41ba:	4607      	mov	r7, r0
        if (n > 0) {
   d41bc:	dd35      	ble.n	d422a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x78>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d41be:	f04f 0914 	mov.w	r9, #20
    return ::malloc(size);
   d41c2:	fb09 f008 	mul.w	r0, r9, r8
   d41c6:	f000 fa9d 	bl	d4704 <malloc>
            if (!d) {
   d41ca:	4605      	mov	r5, r0
   d41cc:	b3a8      	cbz	r0, d423a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x88>
            move(d, data_, data_ + size_);
   d41ce:	e9d7 4600 	ldrd	r4, r6, [r7]
        if (dest > p && dest < end) {
   d41d2:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   d41d4:	fb09 4606 	mla	r6, r9, r6, r4
        if (dest > p && dest < end) {
   d41d8:	d215      	bcs.n	d4206 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
   d41da:	4286      	cmp	r6, r0
   d41dc:	d914      	bls.n	d4208 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
            --end;
   d41de:	3e14      	subs	r6, #20
            dest += end - p - 1;
   d41e0:	f1a4 0914 	sub.w	r9, r4, #20
   d41e4:	1b34      	subs	r4, r6, r4
   d41e6:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d41e8:	45b1      	cmp	r9, r6
   d41ea:	d01f      	beq.n	d422c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
                new(dest) T(std::move(*end));
   d41ec:	b12c      	cbz	r4, d41fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x48>
   d41ee:	4631      	mov	r1, r6
   d41f0:	4620      	mov	r0, r4
   d41f2:	f000 fba1 	bl	d4938 <_ZN6StringC1EOS_>
   d41f6:	7c33      	ldrb	r3, [r6, #16]
   d41f8:	7423      	strb	r3, [r4, #16]
   d41fa:	4630      	mov	r0, r6
   d41fc:	f000 fb20 	bl	d4840 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4200:	3e14      	subs	r6, #20
   d4202:	3c14      	subs	r4, #20
   d4204:	e7f0      	b.n	d41e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x36>
        } else if (dest != p) {
   d4206:	d011      	beq.n	d422c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
   d4208:	46a9      	mov	r9, r5
            for (; p != end; ++p, ++dest) {
   d420a:	42a6      	cmp	r6, r4
   d420c:	d00e      	beq.n	d422c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7a>
   d420e:	4621      	mov	r1, r4
   d4210:	4648      	mov	r0, r9
   d4212:	f000 fb91 	bl	d4938 <_ZN6StringC1EOS_>
   d4216:	7c23      	ldrb	r3, [r4, #16]
   d4218:	f889 3010 	strb.w	r3, [r9, #16]
   d421c:	4620      	mov	r0, r4
   d421e:	f000 fb0f 	bl	d4840 <_ZN6StringD1Ev>
   d4222:	3414      	adds	r4, #20
   d4224:	f109 0914 	add.w	r9, r9, #20
   d4228:	e7ef      	b.n	d420a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x58>
        T* d = nullptr;
   d422a:	2500      	movs	r5, #0
    ::free(ptr);
   d422c:	6838      	ldr	r0, [r7, #0]
   d422e:	f000 fa71 	bl	d4714 <free>
        data_ = d;
   d4232:	603d      	str	r5, [r7, #0]
        capacity_ = n;
   d4234:	f8c7 8008 	str.w	r8, [r7, #8]
        return true;
   d4238:	2001      	movs	r0, #1
    }
   d423a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d423e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d423e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4242:	2300      	movs	r3, #0
   d4244:	e9c0 3300 	strd	r3, r3, [r0]
   d4248:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d424a:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d424c:	6849      	ldr	r1, [r1, #4]
   d424e:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4250:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4252:	dd17      	ble.n	d4284 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
   d4254:	f7ff ffad 	bl	d41b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d4258:	b1a0      	cbz	r0, d4284 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x46>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d425a:	e9d5 6300 	ldrd	r6, r3, [r5]
   d425e:	f04f 0814 	mov.w	r8, #20
   d4262:	6827      	ldr	r7, [r4, #0]
   d4264:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   d4268:	45b0      	cmp	r8, r6
   d426a:	d009      	beq.n	d4280 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x42>
            new(dest) T(*it);
   d426c:	b12f      	cbz	r7, d427a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x3c>
   d426e:	4631      	mov	r1, r6
   d4270:	4638      	mov	r0, r7
   d4272:	f000 fb7b 	bl	d496c <_ZN6StringC1ERKS_>
   d4276:	7c33      	ldrb	r3, [r6, #16]
   d4278:	743b      	strb	r3, [r7, #16]
        for (; it != end; ++it, ++dest) {
   d427a:	3614      	adds	r6, #20
   d427c:	3714      	adds	r7, #20
   d427e:	e7f3      	b.n	d4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2a>
        size_ = vector.size_;
   d4280:	686b      	ldr	r3, [r5, #4]
   d4282:	6063      	str	r3, [r4, #4]
}
   d4284:	4620      	mov	r0, r4
   d4286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d428c <_GLOBAL__sub_I_serLog>:
   d428c:	b530      	push	{r4, r5, lr}
   d428e:	b093      	sub	sp, #76	; 0x4c
        level_(level) {
   d4290:	492b      	ldr	r1, [pc, #172]	; (d4340 <_GLOBAL__sub_I_serLog+0xb4>)
   d4292:	a80d      	add	r0, sp, #52	; 0x34
   d4294:	f000 fb1f 	bl	d48d6 <_ZN6StringC1EPKc>
   d4298:	231e      	movs	r3, #30
   d429a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    if (n > 0 && realloc(n)) {
   d429e:	2101      	movs	r1, #1
        capacity_(0) {
   d42a0:	2300      	movs	r3, #0
    if (n > 0 && realloc(n)) {
   d42a2:	a801      	add	r0, sp, #4
        capacity_(0) {
   d42a4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d42a8:	9303      	str	r3, [sp, #12]
    if (n > 0 && realloc(n)) {
   d42aa:	f7ff ff82 	bl	d41b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d42ae:	b150      	cbz	r0, d42c6 <_GLOBAL__sub_I_serLog+0x3a>
        copy(data_, values.begin(), values.end());
   d42b0:	9c01      	ldr	r4, [sp, #4]
            new(dest) T(*p);
   d42b2:	b134      	cbz	r4, d42c2 <_GLOBAL__sub_I_serLog+0x36>
class LogCategoryFilter {
   d42b4:	a90d      	add	r1, sp, #52	; 0x34
   d42b6:	4620      	mov	r0, r4
   d42b8:	f000 fb58 	bl	d496c <_ZN6StringC1ERKS_>
   d42bc:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   d42c0:	7423      	strb	r3, [r4, #16]
        size_ = n;
   d42c2:	2301      	movs	r3, #1
   d42c4:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d42c6:	f001 fd69 	bl	d5d9c <_Z16_fetch_usbserialv>
   d42ca:	a901      	add	r1, sp, #4
   d42cc:	4605      	mov	r5, r0
   d42ce:	a804      	add	r0, sp, #16
        filter_(level, filters) {
   d42d0:	4c1c      	ldr	r4, [pc, #112]	; (d4344 <_GLOBAL__sub_I_serLog+0xb8>)
   d42d2:	f7ff ffb4 	bl	d423e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   d42d6:	a904      	add	r1, sp, #16
   d42d8:	a807      	add	r0, sp, #28
   d42da:	f7ff ffb0 	bl	d423e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d42de:	4b1a      	ldr	r3, [pc, #104]	; (d4348 <_GLOBAL__sub_I_serLog+0xbc>)
   d42e0:	6023      	str	r3, [r4, #0]
   d42e2:	a907      	add	r1, sp, #28
   d42e4:	a80a      	add	r0, sp, #40	; 0x28
   d42e6:	f7ff ffaa 	bl	d423e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d42ea:	aa0a      	add	r2, sp, #40	; 0x28
   d42ec:	2128      	movs	r1, #40	; 0x28
   d42ee:	1d20      	adds	r0, r4, #4
   d42f0:	f001 f8aa 	bl	d5448 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d42f4:	a80a      	add	r0, sp, #40	; 0x28
   d42f6:	f7ff ff49 	bl	d418c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d42fa:	a807      	add	r0, sp, #28
   d42fc:	f7ff ff46 	bl	d418c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4300:	4b12      	ldr	r3, [pc, #72]	; (d434c <_GLOBAL__sub_I_serLog+0xc0>)
   d4302:	6023      	str	r3, [r4, #0]
   d4304:	6225      	str	r5, [r4, #32]
   d4306:	a804      	add	r0, sp, #16
   d4308:	f7ff ff40 	bl	d418c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d430c:	4b10      	ldr	r3, [pc, #64]	; (d4350 <_GLOBAL__sub_I_serLog+0xc4>)
   d430e:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4310:	f001 fd44 	bl	d5d9c <_Z16_fetch_usbserialv>
   d4314:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4318:	f001 fd30 	bl	d5d7c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d431c:	f000 fd3c 	bl	d4d98 <_ZN5spark10LogManager8instanceEv>
   d4320:	4621      	mov	r1, r4
   d4322:	f001 f823 	bl	d536c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler serLog(LOG_LEVEL_WARN, {{"app", LOG_LEVEL_INFO}});
   d4326:	a801      	add	r0, sp, #4
   d4328:	f7ff ff30 	bl	d418c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
class LogCategoryFilter {
   d432c:	a80d      	add	r0, sp, #52	; 0x34
   d432e:	f000 fa87 	bl	d4840 <_ZN6StringD1Ev>
   d4332:	4a08      	ldr	r2, [pc, #32]	; (d4354 <_GLOBAL__sub_I_serLog+0xc8>)
   d4334:	4908      	ldr	r1, [pc, #32]	; (d4358 <_GLOBAL__sub_I_serLog+0xcc>)
   d4336:	4620      	mov	r0, r4
   d4338:	f002 f984 	bl	d6644 <__aeabi_atexit>
   d433c:	b013      	add	sp, #76	; 0x4c
   d433e:	bd30      	pop	{r4, r5, pc}
   d4340:	000d6903 	.word	0x000d6903
   d4344:	2003e5e8 	.word	0x2003e5e8
   d4348:	000d6910 	.word	0x000d6910
   d434c:	000d6a00 	.word	0x000d6a00
   d4350:	000d6928 	.word	0x000d6928
   d4354:	2003e5e4 	.word	0x2003e5e4
   d4358:	000d40d1 	.word	0x000d40d1

000d435c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <netdb_freeaddrinfo+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	689b      	ldr	r3, [r3, #8]
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	00030268 	.word	0x00030268

000d436c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <netdb_getaddrinfo+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	68db      	ldr	r3, [r3, #12]
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	00030268 	.word	0x00030268

000d437c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <HAL_Validate_Pin_Function+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	685b      	ldr	r3, [r3, #4]
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	0003022c 	.word	0x0003022c

000d438c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <hal_adc_read+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	0003022c 	.word	0x0003022c

000d439c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <HAL_RNG_GetRandomNumber+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	685b      	ldr	r3, [r3, #4]
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	00030218 	.word	0x00030218

000d43ac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <HAL_Delay_Microseconds+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	68db      	ldr	r3, [r3, #12]
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	00030218 	.word	0x00030218

000d43bc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	695b      	ldr	r3, [r3, #20]
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	00030218 	.word	0x00030218

000d43cc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <os_mutex_recursive_create+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	00030248 	.word	0x00030248

000d43dc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <os_mutex_recursive_destroy+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	00030248 	.word	0x00030248

000d43ec <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <os_mutex_recursive_lock+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	00030248 	.word	0x00030248

000d43fc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <os_mutex_recursive_unlock+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	00030248 	.word	0x00030248

000d440c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <inet_inet_ntop+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	695b      	ldr	r3, [r3, #20]
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	00030264 	.word	0x00030264

000d441c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <hal_usart_init+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	681b      	ldr	r3, [r3, #0]
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	0003023c 	.word	0x0003023c

000d442c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <hal_usart_end+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	689b      	ldr	r3, [r3, #8]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	0003023c 	.word	0x0003023c

000d443c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <hal_usart_write+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	68db      	ldr	r3, [r3, #12]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	0003023c 	.word	0x0003023c

000d444c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <hal_usart_available+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	691b      	ldr	r3, [r3, #16]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	0003023c 	.word	0x0003023c

000d445c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <hal_usart_read+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	695b      	ldr	r3, [r3, #20]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	0003023c 	.word	0x0003023c

000d446c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <hal_usart_peek+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	699b      	ldr	r3, [r3, #24]
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	0003023c 	.word	0x0003023c

000d447c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <hal_usart_flush+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	69db      	ldr	r3, [r3, #28]
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	0003023c 	.word	0x0003023c

000d448c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <hal_usart_is_enabled+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	6a1b      	ldr	r3, [r3, #32]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	0003023c 	.word	0x0003023c

000d449c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <hal_usart_available_data_for_write+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	0003023c 	.word	0x0003023c

000d44ac <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <hal_usart_begin_config+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	0003023c 	.word	0x0003023c

000d44bc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <hal_i2c_write+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	6a1b      	ldr	r3, [r3, #32]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030228 	.word	0x00030228

000d44cc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <hal_i2c_available+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030228 	.word	0x00030228

000d44dc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <hal_i2c_read+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030228 	.word	0x00030228

000d44ec <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <hal_i2c_peek+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	00030228 	.word	0x00030228

000d44fc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <hal_i2c_flush+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	00030228 	.word	0x00030228

000d450c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <hal_i2c_is_enabled+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	00030228 	.word	0x00030228

000d451c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <hal_i2c_init+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030228 	.word	0x00030228

000d452c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <hal_spi_init+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	69db      	ldr	r3, [r3, #28]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030230 	.word	0x00030230

000d453c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <hal_spi_is_enabled+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	6a1b      	ldr	r3, [r3, #32]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030230 	.word	0x00030230

000d454c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <HAL_USB_USART_Init+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	681b      	ldr	r3, [r3, #0]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	0003024c 	.word	0x0003024c

000d455c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <HAL_USB_USART_Begin+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	685b      	ldr	r3, [r3, #4]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	0003024c 	.word	0x0003024c

000d456c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <HAL_USB_USART_End+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	689b      	ldr	r3, [r3, #8]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	0003024c 	.word	0x0003024c

000d457c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <HAL_USB_USART_Available_Data+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	691b      	ldr	r3, [r3, #16]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	0003024c 	.word	0x0003024c

000d458c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	695b      	ldr	r3, [r3, #20]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	0003024c 	.word	0x0003024c

000d459c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <HAL_USB_USART_Receive_Data+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	699b      	ldr	r3, [r3, #24]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	0003024c 	.word	0x0003024c

000d45ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <HAL_USB_USART_Send_Data+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	69db      	ldr	r3, [r3, #28]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	0003024c 	.word	0x0003024c

000d45bc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <HAL_USB_USART_Flush_Data+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	6a1b      	ldr	r3, [r3, #32]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	0003024c 	.word	0x0003024c

000d45cc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <panic_+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	00030260 	.word	0x00030260

000d45dc <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <log_message_v+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030260 	.word	0x00030260

000d45ec <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <log_level_name+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030260 	.word	0x00030260

000d45fc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <log_set_callbacks+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030260 	.word	0x00030260

000d460c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <set_system_mode+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	685b      	ldr	r3, [r3, #4]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030220 	.word	0x00030220

000d461c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <system_delay_ms+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	695b      	ldr	r3, [r3, #20]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	00030220 	.word	0x00030220

000d462c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b03      	ldr	r3, [pc, #12]	; (d463c <system_ctrl_set_app_request_handler+0x10>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4636:	9301      	str	r3, [sp, #4]
   d4638:	bd08      	pop	{r3, pc}
   d463a:	0000      	.short	0x0000
   d463c:	00030220 	.word	0x00030220

000d4640 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b03      	ldr	r3, [pc, #12]	; (d4650 <system_ctrl_set_result+0x10>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d464a:	9301      	str	r3, [sp, #4]
   d464c:	bd08      	pop	{r3, pc}
   d464e:	0000      	.short	0x0000
   d4650:	00030220 	.word	0x00030220

000d4654 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <network_connect+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	685b      	ldr	r3, [r3, #4]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030240 	.word	0x00030240

000d4664 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <network_connecting+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	689b      	ldr	r3, [r3, #8]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030240 	.word	0x00030240

000d4674 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <network_disconnect+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	68db      	ldr	r3, [r3, #12]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030240 	.word	0x00030240

000d4684 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <network_ready+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	691b      	ldr	r3, [r3, #16]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030240 	.word	0x00030240

000d4694 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <network_on+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	695b      	ldr	r3, [r3, #20]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030240 	.word	0x00030240

000d46a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <network_off+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	699b      	ldr	r3, [r3, #24]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030240 	.word	0x00030240

000d46b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <network_listen+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	69db      	ldr	r3, [r3, #28]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030240 	.word	0x00030240

000d46c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <network_listening+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	6a1b      	ldr	r3, [r3, #32]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030240 	.word	0x00030240

000d46d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <network_set_listen_timeout+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030240 	.word	0x00030240

000d46e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <network_get_listen_timeout+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030240 	.word	0x00030240

000d46f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030244 	.word	0x00030244

000d4704 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <malloc+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	681b      	ldr	r3, [r3, #0]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003021c 	.word	0x0003021c

000d4714 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <free+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	685b      	ldr	r3, [r3, #4]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003021c 	.word	0x0003021c

000d4724 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <realloc+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	689b      	ldr	r3, [r3, #8]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003021c 	.word	0x0003021c

000d4734 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <vsnprintf+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003021c 	.word	0x0003021c

000d4744 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <newlib_impure_ptr_callback+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	0003021c 	.word	0x0003021c

000d4754 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4754:	2200      	movs	r2, #0
   d4756:	6840      	ldr	r0, [r0, #4]
   d4758:	4611      	mov	r1, r2
   d475a:	f7ff bfb3 	b.w	d46c4 <network_listening>

000d475e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d475e:	2200      	movs	r2, #0
   d4760:	6840      	ldr	r0, [r0, #4]
   d4762:	4611      	mov	r1, r2
   d4764:	f7ff bfbe 	b.w	d46e4 <network_get_listen_timeout>

000d4768 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4768:	6840      	ldr	r0, [r0, #4]
   d476a:	2200      	movs	r2, #0
   d476c:	f7ff bfb2 	b.w	d46d4 <network_set_listen_timeout>

000d4770 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4770:	6840      	ldr	r0, [r0, #4]
   d4772:	2200      	movs	r2, #0
   d4774:	f081 0101 	eor.w	r1, r1, #1
   d4778:	f7ff bf9c 	b.w	d46b4 <network_listen>

000d477c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d477c:	2300      	movs	r3, #0
   d477e:	6840      	ldr	r0, [r0, #4]
   d4780:	461a      	mov	r2, r3
   d4782:	4619      	mov	r1, r3
   d4784:	f7ff bf8e 	b.w	d46a4 <network_off>

000d4788 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4788:	2300      	movs	r3, #0
   d478a:	6840      	ldr	r0, [r0, #4]
   d478c:	461a      	mov	r2, r3
   d478e:	4619      	mov	r1, r3
   d4790:	f7ff bf80 	b.w	d4694 <network_on>

000d4794 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4794:	2200      	movs	r2, #0
   d4796:	6840      	ldr	r0, [r0, #4]
   d4798:	4611      	mov	r1, r2
   d479a:	f7ff bf73 	b.w	d4684 <network_ready>

000d479e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d479e:	2200      	movs	r2, #0
   d47a0:	6840      	ldr	r0, [r0, #4]
   d47a2:	4611      	mov	r1, r2
   d47a4:	f7ff bf5e 	b.w	d4664 <network_connecting>

000d47a8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d47a8:	6840      	ldr	r0, [r0, #4]
   d47aa:	2200      	movs	r2, #0
   d47ac:	2102      	movs	r1, #2
   d47ae:	f7ff bf61 	b.w	d4674 <network_disconnect>

000d47b2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d47b2:	2300      	movs	r3, #0
   d47b4:	6840      	ldr	r0, [r0, #4]
   d47b6:	461a      	mov	r2, r3
   d47b8:	f7ff bf4c 	b.w	d4654 <network_connect>

000d47bc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d47bc:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d47be:	2203      	movs	r2, #3
   d47c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d47c2:	4a02      	ldr	r2, [pc, #8]	; (d47cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d47c4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d47c6:	4770      	bx	lr
   d47c8:	2003e610 	.word	0x2003e610
   d47cc:	000d6940 	.word	0x000d6940

000d47d0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d47d0:	b510      	push	{r4, lr}
   d47d2:	4604      	mov	r4, r0
   d47d4:	4608      	mov	r0, r1
{
    _spi = spi;
   d47d6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d47d8:	f7ff fea8 	bl	d452c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d47dc:	2300      	movs	r3, #0
   d47de:	6063      	str	r3, [r4, #4]
}
   d47e0:	4620      	mov	r0, r4
   d47e2:	bd10      	pop	{r4, pc}

000d47e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d47e4:	b510      	push	{r4, lr}
   d47e6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d47e8:	6800      	ldr	r0, [r0, #0]
   d47ea:	b118      	cbz	r0, d47f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d47ec:	f7ff ff92 	bl	d4714 <free>
            wakeupSource_ = nullptr;
   d47f0:	2300      	movs	r3, #0
   d47f2:	6023      	str	r3, [r4, #0]
        }
    }
   d47f4:	bd10      	pop	{r4, pc}

000d47f6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d47f6:	b510      	push	{r4, lr}
   d47f8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d47fa:	f7ff fff3 	bl	d47e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d47fe:	4620      	mov	r0, r4
   d4800:	bd10      	pop	{r4, pc}
	...

000d4804 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4804:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4806:	4b09      	ldr	r3, [pc, #36]	; (d482c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4808:	4c09      	ldr	r4, [pc, #36]	; (d4830 <_GLOBAL__sub_I_System+0x2c>)
   d480a:	2202      	movs	r2, #2
   d480c:	2000      	movs	r0, #0
   d480e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4810:	4b08      	ldr	r3, [pc, #32]	; (d4834 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4812:	6020      	str	r0, [r4, #0]
   d4814:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4816:	71a0      	strb	r0, [r4, #6]
   d4818:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d481a:	f7ff fef7 	bl	d460c <set_system_mode>
SystemClass System;
   d481e:	4620      	mov	r0, r4
   d4820:	4a05      	ldr	r2, [pc, #20]	; (d4838 <_GLOBAL__sub_I_System+0x34>)
   d4822:	4906      	ldr	r1, [pc, #24]	; (d483c <_GLOBAL__sub_I_System+0x38>)
   d4824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4828:	f001 bf0c 	b.w	d6644 <__aeabi_atexit>
   d482c:	2003e624 	.word	0x2003e624
   d4830:	2003e618 	.word	0x2003e618
   d4834:	ffff0000 	.word	0xffff0000
   d4838:	2003e5e4 	.word	0x2003e5e4
   d483c:	000d47f7 	.word	0x000d47f7

000d4840 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4840:	b510      	push	{r4, lr}
   d4842:	4604      	mov	r4, r0
{
	free(buffer);
   d4844:	6800      	ldr	r0, [r0, #0]
   d4846:	f7ff ff65 	bl	d4714 <free>
}
   d484a:	4620      	mov	r0, r4
   d484c:	bd10      	pop	{r4, pc}

000d484e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d484e:	b510      	push	{r4, lr}
   d4850:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4852:	6800      	ldr	r0, [r0, #0]
   d4854:	b108      	cbz	r0, d485a <_ZN6String10invalidateEv+0xc>
   d4856:	f7ff ff5d 	bl	d4714 <free>
	buffer = NULL;
   d485a:	2300      	movs	r3, #0
	capacity = len = 0;
   d485c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4860:	6023      	str	r3, [r4, #0]
}
   d4862:	bd10      	pop	{r4, pc}

000d4864 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4864:	b538      	push	{r3, r4, r5, lr}
   d4866:	4604      	mov	r4, r0
   d4868:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d486a:	6800      	ldr	r0, [r0, #0]
   d486c:	3101      	adds	r1, #1
   d486e:	f7ff ff59 	bl	d4724 <realloc>
	if (newbuffer) {
   d4872:	b110      	cbz	r0, d487a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4874:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4878:	2001      	movs	r0, #1
	}
	return 0;
}
   d487a:	bd38      	pop	{r3, r4, r5, pc}

000d487c <_ZN6String7reserveEj>:
{
   d487c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d487e:	6803      	ldr	r3, [r0, #0]
{
   d4880:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4882:	b123      	cbz	r3, d488e <_ZN6String7reserveEj+0x12>
   d4884:	6843      	ldr	r3, [r0, #4]
   d4886:	428b      	cmp	r3, r1
   d4888:	d301      	bcc.n	d488e <_ZN6String7reserveEj+0x12>
   d488a:	2001      	movs	r0, #1
}
   d488c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d488e:	4620      	mov	r0, r4
   d4890:	f7ff ffe8 	bl	d4864 <_ZN6String12changeBufferEj>
   d4894:	2800      	cmp	r0, #0
   d4896:	d0f9      	beq.n	d488c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4898:	68a3      	ldr	r3, [r4, #8]
   d489a:	2b00      	cmp	r3, #0
   d489c:	d1f5      	bne.n	d488a <_ZN6String7reserveEj+0xe>
   d489e:	6822      	ldr	r2, [r4, #0]
   d48a0:	7013      	strb	r3, [r2, #0]
   d48a2:	e7f2      	b.n	d488a <_ZN6String7reserveEj+0xe>

000d48a4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d48a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d48a6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d48a8:	4611      	mov	r1, r2
   d48aa:	9201      	str	r2, [sp, #4]
{
   d48ac:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d48ae:	f7ff ffe5 	bl	d487c <_ZN6String7reserveEj>
   d48b2:	9a01      	ldr	r2, [sp, #4]
   d48b4:	b928      	cbnz	r0, d48c2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d48b6:	4620      	mov	r0, r4
   d48b8:	f7ff ffc9 	bl	d484e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d48bc:	4620      	mov	r0, r4
   d48be:	b003      	add	sp, #12
   d48c0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d48c2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d48c4:	4629      	mov	r1, r5
   d48c6:	6820      	ldr	r0, [r4, #0]
   d48c8:	f001 fed6 	bl	d6678 <memcpy>
	buffer[len] = 0;
   d48cc:	6822      	ldr	r2, [r4, #0]
   d48ce:	68a3      	ldr	r3, [r4, #8]
   d48d0:	2100      	movs	r1, #0
   d48d2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d48d4:	e7f2      	b.n	d48bc <_ZN6String4copyEPKcj+0x18>

000d48d6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d48d6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d48d8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d48da:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d48de:	4604      	mov	r4, r0
	len = 0;
   d48e0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d48e2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d48e4:	b141      	cbz	r1, d48f8 <_ZN6StringC1EPKc+0x22>
   d48e6:	4608      	mov	r0, r1
   d48e8:	9101      	str	r1, [sp, #4]
   d48ea:	f001 ff42 	bl	d6772 <strlen>
   d48ee:	9901      	ldr	r1, [sp, #4]
   d48f0:	4602      	mov	r2, r0
   d48f2:	4620      	mov	r0, r4
   d48f4:	f7ff ffd6 	bl	d48a4 <_ZN6String4copyEPKcj>
}
   d48f8:	4620      	mov	r0, r4
   d48fa:	b002      	add	sp, #8
   d48fc:	bd10      	pop	{r4, pc}

000d48fe <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d48fe:	b538      	push	{r3, r4, r5, lr}
   d4900:	4605      	mov	r5, r0
	if (buffer) {
   d4902:	6800      	ldr	r0, [r0, #0]
{
   d4904:	460c      	mov	r4, r1
	if (buffer) {
   d4906:	b168      	cbz	r0, d4924 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d4908:	686a      	ldr	r2, [r5, #4]
   d490a:	688b      	ldr	r3, [r1, #8]
   d490c:	429a      	cmp	r2, r3
   d490e:	d307      	bcc.n	d4920 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d4910:	6809      	ldr	r1, [r1, #0]
   d4912:	f001 ff26 	bl	d6762 <strcpy>
			len = rhs.len;
   d4916:	68a3      	ldr	r3, [r4, #8]
   d4918:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d491a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d491c:	60a3      	str	r3, [r4, #8]
}
   d491e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d4920:	f7ff fef8 	bl	d4714 <free>
	buffer = rhs.buffer;
   d4924:	6823      	ldr	r3, [r4, #0]
   d4926:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4928:	6863      	ldr	r3, [r4, #4]
   d492a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d492c:	68a3      	ldr	r3, [r4, #8]
   d492e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d4930:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d4932:	e9c4 3300 	strd	r3, r3, [r4]
   d4936:	e7f1      	b.n	d491c <_ZN6String4moveERS_+0x1e>

000d4938 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d4938:	b510      	push	{r4, lr}
	buffer = NULL;
   d493a:	2300      	movs	r3, #0
	capacity = 0;
   d493c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d4940:	4604      	mov	r4, r0
	len = 0;
   d4942:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4944:	7303      	strb	r3, [r0, #12]
	move(rval);
   d4946:	f7ff ffda 	bl	d48fe <_ZN6String4moveERS_>
}
   d494a:	4620      	mov	r0, r4
   d494c:	bd10      	pop	{r4, pc}

000d494e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d494e:	4288      	cmp	r0, r1
{
   d4950:	b510      	push	{r4, lr}
   d4952:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4954:	d005      	beq.n	d4962 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4956:	680b      	ldr	r3, [r1, #0]
   d4958:	b12b      	cbz	r3, d4966 <_ZN6StringaSERKS_+0x18>
   d495a:	688a      	ldr	r2, [r1, #8]
   d495c:	4619      	mov	r1, r3
   d495e:	f7ff ffa1 	bl	d48a4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4962:	4620      	mov	r0, r4
   d4964:	bd10      	pop	{r4, pc}
	else invalidate();
   d4966:	f7ff ff72 	bl	d484e <_ZN6String10invalidateEv>
   d496a:	e7fa      	b.n	d4962 <_ZN6StringaSERKS_+0x14>

000d496c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d496c:	b510      	push	{r4, lr}
	buffer = NULL;
   d496e:	2300      	movs	r3, #0
String::String(const String &value)
   d4970:	4604      	mov	r4, r0
	capacity = 0;
   d4972:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4976:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4978:	7303      	strb	r3, [r0, #12]
	*this = value;
   d497a:	f7ff ffe8 	bl	d494e <_ZN6StringaSERKS_>
}
   d497e:	4620      	mov	r0, r4
   d4980:	bd10      	pop	{r4, pc}

000d4982 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4982:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4984:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4986:	4604      	mov	r4, r0
          _M_dispose();
   d4988:	689b      	ldr	r3, [r3, #8]
   d498a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d498c:	68a3      	ldr	r3, [r4, #8]
   d498e:	3b01      	subs	r3, #1
   d4990:	60a3      	str	r3, [r4, #8]
   d4992:	b92b      	cbnz	r3, d49a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4994:	6823      	ldr	r3, [r4, #0]
   d4996:	4620      	mov	r0, r4
   d4998:	68db      	ldr	r3, [r3, #12]
        }
    }
   d499a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d499e:	4718      	bx	r3
    }
   d49a0:	bd10      	pop	{r4, pc}

000d49a2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d49a2:	b510      	push	{r4, lr}
   d49a4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d49a6:	6800      	ldr	r0, [r0, #0]
   d49a8:	b108      	cbz	r0, d49ae <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d49aa:	f7ff fd17 	bl	d43dc <os_mutex_recursive_destroy>
    }
   d49ae:	4620      	mov	r0, r4
   d49b0:	bd10      	pop	{r4, pc}

000d49b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d49b2:	680b      	ldr	r3, [r1, #0]
   d49b4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d49b6:	b113      	cbz	r3, d49be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d49b8:	685a      	ldr	r2, [r3, #4]
   d49ba:	3201      	adds	r2, #1
   d49bc:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d49be:	4770      	bx	lr

000d49c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d49c0:	b510      	push	{r4, lr}
   d49c2:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d49c4:	6800      	ldr	r0, [r0, #0]
   d49c6:	b128      	cbz	r0, d49d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d49c8:	6843      	ldr	r3, [r0, #4]
   d49ca:	3b01      	subs	r3, #1
   d49cc:	6043      	str	r3, [r0, #4]
   d49ce:	b90b      	cbnz	r3, d49d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d49d0:	f7ff ffd7 	bl	d4982 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d49d4:	4620      	mov	r0, r4
   d49d6:	bd10      	pop	{r4, pc}

000d49d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d49d8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d49da:	4c06      	ldr	r4, [pc, #24]	; (d49f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d49dc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d49de:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d49e0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d49e2:	f7ff fcf3 	bl	d43cc <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d49e6:	4620      	mov	r0, r4
   d49e8:	4a03      	ldr	r2, [pc, #12]	; (d49f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d49ea:	4904      	ldr	r1, [pc, #16]	; (d49fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d49ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d49f0:	f001 be28 	b.w	d6644 <__aeabi_atexit>
   d49f4:	2003e628 	.word	0x2003e628
   d49f8:	2003e5e4 	.word	0x2003e5e4
   d49fc:	000d49a3 	.word	0x000d49a3

000d4a00 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a02:	4606      	mov	r6, r0
   d4a04:	460d      	mov	r5, r1
  size_t n = 0;
   d4a06:	188f      	adds	r7, r1, r2
   d4a08:	2400      	movs	r4, #0
  while (size--) {
   d4a0a:	42bd      	cmp	r5, r7
   d4a0c:	d00c      	beq.n	d4a28 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4a0e:	6833      	ldr	r3, [r6, #0]
   d4a10:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4a14:	689b      	ldr	r3, [r3, #8]
   d4a16:	4630      	mov	r0, r6
   d4a18:	4798      	blx	r3
     if (chunk>=0)
   d4a1a:	1e03      	subs	r3, r0, #0
   d4a1c:	db01      	blt.n	d4a22 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4a1e:	441c      	add	r4, r3
  while (size--) {
   d4a20:	e7f3      	b.n	d4a0a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4a22:	2c00      	cmp	r4, #0
   d4a24:	bf08      	it	eq
   d4a26:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4a28:	4620      	mov	r0, r4
   d4a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a2c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4a2c:	b513      	push	{r0, r1, r4, lr}
   d4a2e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4a30:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4a32:	b159      	cbz	r1, d4a4c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4a34:	9101      	str	r1, [sp, #4]
   d4a36:	f001 fe9c 	bl	d6772 <strlen>
   d4a3a:	6823      	ldr	r3, [r4, #0]
   d4a3c:	9901      	ldr	r1, [sp, #4]
   d4a3e:	68db      	ldr	r3, [r3, #12]
   d4a40:	4602      	mov	r2, r0
   d4a42:	4620      	mov	r0, r4
    }
   d4a44:	b002      	add	sp, #8
   d4a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4a4a:	4718      	bx	r3
    }
   d4a4c:	b002      	add	sp, #8
   d4a4e:	bd10      	pop	{r4, pc}

000d4a50 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4a50:	6803      	ldr	r3, [r0, #0]
   d4a52:	689b      	ldr	r3, [r3, #8]
   d4a54:	4718      	bx	r3

000d4a56 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4a56:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4a58:	210d      	movs	r1, #13
{
   d4a5a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4a5c:	f7ff fff8 	bl	d4a50 <_ZN5Print5printEc>
  n += print('\n');
   d4a60:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4a62:	4604      	mov	r4, r0
  n += print('\n');
   d4a64:	4628      	mov	r0, r5
   d4a66:	f7ff fff3 	bl	d4a50 <_ZN5Print5printEc>
  return n;
}
   d4a6a:	4420      	add	r0, r4
   d4a6c:	bd38      	pop	{r3, r4, r5, pc}

000d4a6e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4a6e:	b530      	push	{r4, r5, lr}
   d4a70:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4a72:	2300      	movs	r3, #0
   d4a74:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4a78:	2a01      	cmp	r2, #1
   d4a7a:	bf98      	it	ls
   d4a7c:	220a      	movls	r2, #10
   d4a7e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4a80:	460d      	mov	r5, r1
   d4a82:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4a86:	fb01 5312 	mls	r3, r1, r2, r5
   d4a8a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4a8e:	2b09      	cmp	r3, #9
   d4a90:	bf94      	ite	ls
   d4a92:	3330      	addls	r3, #48	; 0x30
   d4a94:	3337      	addhi	r3, #55	; 0x37
   d4a96:	b2db      	uxtb	r3, r3
  } while(n);
   d4a98:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4a9a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4a9e:	d9ef      	bls.n	d4a80 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4aa0:	4621      	mov	r1, r4
   d4aa2:	f7ff ffc3 	bl	d4a2c <_ZN5Print5writeEPKc>
}
   d4aa6:	b00b      	add	sp, #44	; 0x2c
   d4aa8:	bd30      	pop	{r4, r5, pc}

000d4aaa <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d4aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4aae:	b086      	sub	sp, #24
   d4ab0:	af00      	add	r7, sp, #0
   d4ab2:	4605      	mov	r5, r0
   d4ab4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d4ab6:	1d38      	adds	r0, r7, #4
   d4ab8:	2114      	movs	r1, #20
{
   d4aba:	4614      	mov	r4, r2
    va_copy(args2, args);
   d4abc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d4abe:	f7ff fe39 	bl	d4734 <vsnprintf>

    if (n<bufsize)
   d4ac2:	2813      	cmp	r0, #19
   d4ac4:	d80e      	bhi.n	d4ae4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d4ac6:	1d39      	adds	r1, r7, #4
   d4ac8:	4628      	mov	r0, r5
   d4aca:	f7ff ffaf 	bl	d4a2c <_ZN5Print5writeEPKc>
   d4ace:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d4ad0:	b11e      	cbz	r6, d4ada <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d4ad2:	4628      	mov	r0, r5
   d4ad4:	f7ff ffbf 	bl	d4a56 <_ZN5Print7printlnEv>
   d4ad8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d4ada:	4620      	mov	r0, r4
   d4adc:	3718      	adds	r7, #24
   d4ade:	46bd      	mov	sp, r7
   d4ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d4ae4:	f100 0308 	add.w	r3, r0, #8
   d4ae8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d4aec:	46e8      	mov	r8, sp
        char bigger[n+1];
   d4aee:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d4af2:	4622      	mov	r2, r4
   d4af4:	1c41      	adds	r1, r0, #1
   d4af6:	683b      	ldr	r3, [r7, #0]
   d4af8:	4668      	mov	r0, sp
   d4afa:	f7ff fe1b 	bl	d4734 <vsnprintf>
  return write(str);
   d4afe:	4669      	mov	r1, sp
   d4b00:	4628      	mov	r0, r5
   d4b02:	f7ff ff93 	bl	d4a2c <_ZN5Print5writeEPKc>
   d4b06:	4604      	mov	r4, r0
   d4b08:	46c5      	mov	sp, r8
   d4b0a:	e7e1      	b.n	d4ad0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d4b0c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d4b0c:	6880      	ldr	r0, [r0, #8]
   d4b0e:	6803      	ldr	r3, [r0, #0]
   d4b10:	68db      	ldr	r3, [r3, #12]
   d4b12:	4718      	bx	r3

000d4b14 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d4b14:	4770      	bx	lr

000d4b16 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d4b16:	4608      	mov	r0, r1
   d4b18:	b111      	cbz	r1, d4b20 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d4b1a:	680b      	ldr	r3, [r1, #0]
   d4b1c:	685b      	ldr	r3, [r3, #4]
   d4b1e:	4718      	bx	r3
}
   d4b20:	4770      	bx	lr

000d4b22 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4b22:	4770      	bx	lr

000d4b24 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d4b24:	4770      	bx	lr

000d4b26 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d4b26:	4770      	bx	lr

000d4b28 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d4b28:	b538      	push	{r3, r4, r5, lr}
   d4b2a:	4604      	mov	r4, r0
   d4b2c:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d4b2e:	6800      	ldr	r0, [r0, #0]
   d4b30:	212e      	movs	r1, #46	; 0x2e
   d4b32:	f001 fe02 	bl	d673a <strchrnul>
    size = s - category;
   d4b36:	6823      	ldr	r3, [r4, #0]
   d4b38:	1ac3      	subs	r3, r0, r3
   d4b3a:	602b      	str	r3, [r5, #0]
    if (size) {
   d4b3c:	b123      	cbz	r3, d4b48 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d4b3e:	7803      	ldrb	r3, [r0, #0]
   d4b40:	b103      	cbz	r3, d4b44 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d4b42:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4b44:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b46:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d4b48:	4618      	mov	r0, r3
   d4b4a:	bd38      	pop	{r3, r4, r5, pc}

000d4b4c <_ZN5spark16JSONStreamWriterD0Ev>:
   d4b4c:	b510      	push	{r4, lr}
   d4b4e:	210c      	movs	r1, #12
   d4b50:	4604      	mov	r4, r0
   d4b52:	f001 fd7c 	bl	d664e <_ZdlPvj>
   d4b56:	4620      	mov	r0, r4
   d4b58:	bd10      	pop	{r4, pc}

000d4b5a <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d4b5a:	b510      	push	{r4, lr}
   d4b5c:	2104      	movs	r1, #4
   d4b5e:	4604      	mov	r4, r0
   d4b60:	f001 fd75 	bl	d664e <_ZdlPvj>
   d4b64:	4620      	mov	r0, r4
   d4b66:	bd10      	pop	{r4, pc}

000d4b68 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4b68:	b510      	push	{r4, lr}
   d4b6a:	2104      	movs	r1, #4
   d4b6c:	4604      	mov	r4, r0
   d4b6e:	f001 fd6e 	bl	d664e <_ZdlPvj>
   d4b72:	4620      	mov	r0, r4
   d4b74:	bd10      	pop	{r4, pc}

000d4b76 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d4b76:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d4b78:	f001 fde9 	bl	d674e <strcmp>
}
   d4b7c:	fab0 f080 	clz	r0, r0
   d4b80:	0940      	lsrs	r0, r0, #5
   d4b82:	bd08      	pop	{r3, pc}

000d4b84 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d4b84:	b510      	push	{r4, lr}
   d4b86:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d4b88:	f001 f908 	bl	d5d9c <_Z16_fetch_usbserialv>
   d4b8c:	4284      	cmp	r4, r0
   d4b8e:	d010      	beq.n	d4bb2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d4b90:	f001 f98c 	bl	d5eac <_Z22__fetch_global_Serial1v>
   d4b94:	4284      	cmp	r4, r0
   d4b96:	d105      	bne.n	d4ba4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d4b98:	f001 f988 	bl	d5eac <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d4b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d4ba0:	f001 b981 	b.w	d5ea6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d4ba4:	b12c      	cbz	r4, d4bb2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d4ba6:	6823      	ldr	r3, [r4, #0]
   d4ba8:	4620      	mov	r0, r4
   d4baa:	685b      	ldr	r3, [r3, #4]
}
   d4bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4bb0:	4718      	bx	r3
   d4bb2:	bd10      	pop	{r4, pc}

000d4bb4 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d4bb4:	b513      	push	{r0, r1, r4, lr}
   d4bb6:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d4bb8:	4608      	mov	r0, r1
   d4bba:	9101      	str	r1, [sp, #4]
   d4bbc:	f001 fdd9 	bl	d6772 <strlen>
   d4bc0:	9901      	ldr	r1, [sp, #4]
   d4bc2:	4602      	mov	r2, r0
   d4bc4:	4620      	mov	r0, r4
}
   d4bc6:	b002      	add	sp, #8
   d4bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d4bcc:	f001 bc94 	b.w	d64f8 <_ZN5spark10JSONWriter5valueEPKcj>

000d4bd0 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d4bd0:	b513      	push	{r0, r1, r4, lr}
   d4bd2:	4604      	mov	r4, r0
    write(str, strlen(str));
   d4bd4:	4608      	mov	r0, r1
   d4bd6:	9101      	str	r1, [sp, #4]
   d4bd8:	f001 fdcb 	bl	d6772 <strlen>
   d4bdc:	6823      	ldr	r3, [r4, #0]
   d4bde:	9901      	ldr	r1, [sp, #4]
   d4be0:	68db      	ldr	r3, [r3, #12]
   d4be2:	4602      	mov	r2, r0
   d4be4:	4620      	mov	r0, r4
}
   d4be6:	b002      	add	sp, #8
   d4be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d4bec:	4718      	bx	r3

000d4bee <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d4bee:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d4bf0:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d4bf2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d4bf6:	68db      	ldr	r3, [r3, #12]
   d4bf8:	2201      	movs	r2, #1
   d4bfa:	f10d 0107 	add.w	r1, sp, #7
   d4bfe:	4798      	blx	r3
}
   d4c00:	b003      	add	sp, #12
   d4c02:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c06 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d4c06:	b40e      	push	{r1, r2, r3}
   d4c08:	b503      	push	{r0, r1, lr}
   d4c0a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d4c0c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d4c0e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d4c12:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d4c14:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d4c16:	f7ff ff48 	bl	d4aaa <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d4c1a:	b002      	add	sp, #8
   d4c1c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4c20:	b003      	add	sp, #12
   d4c22:	4770      	bx	lr

000d4c24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d4c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d4c28:	e9d0 9500 	ldrd	r9, r5, [r0]
   d4c2c:	f04f 0814 	mov.w	r8, #20
   d4c30:	fb08 f505 	mul.w	r5, r8, r5
   d4c34:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d4c36:	10ab      	asrs	r3, r5, #2
   d4c38:	4d18      	ldr	r5, [pc, #96]	; (d4c9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d4c3a:	4617      	mov	r7, r2
   d4c3c:	435d      	muls	r5, r3
   d4c3e:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d4c40:	2d00      	cmp	r5, #0
   d4c42:	dd23      	ble.n	d4c8c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d4c44:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d4c46:	fb08 f006 	mul.w	r0, r8, r6
   d4c4a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d4c4e:	463a      	mov	r2, r7
   d4c50:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d4c54:	5820      	ldr	r0, [r4, r0]
   d4c56:	9101      	str	r1, [sp, #4]
   d4c58:	455f      	cmp	r7, fp
   d4c5a:	bf28      	it	cs
   d4c5c:	465a      	movcs	r2, fp
   d4c5e:	f001 fd90 	bl	d6782 <strncmp>
                if (cmp == 0) {
   d4c62:	9901      	ldr	r1, [sp, #4]
   d4c64:	2301      	movs	r3, #1
   d4c66:	b978      	cbnz	r0, d4c88 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d4c68:	455f      	cmp	r7, fp
   d4c6a:	d103      	bne.n	d4c74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d4c6c:	9a00      	ldr	r2, [sp, #0]
   d4c6e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d4c70:	4635      	mov	r5, r6
   d4c72:	e7e5      	b.n	d4c40 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d4c74:	bf8c      	ite	hi
   d4c76:	2001      	movhi	r0, #1
   d4c78:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d4c7a:	2800      	cmp	r0, #0
   d4c7c:	d0f8      	beq.n	d4c70 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d4c7e:	1bae      	subs	r6, r5, r6
	      ++__first;
   d4c80:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d4c84:	3e01      	subs	r6, #1
   d4c86:	e7f3      	b.n	d4c70 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d4c88:	0fc0      	lsrs	r0, r0, #31
   d4c8a:	e7f6      	b.n	d4c7a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d4c8c:	eba4 0409 	sub.w	r4, r4, r9
}
   d4c90:	4802      	ldr	r0, [pc, #8]	; (d4c9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d4c92:	10a4      	asrs	r4, r4, #2
   d4c94:	4360      	muls	r0, r4
   d4c96:	b003      	add	sp, #12
   d4c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c9c:	cccccccd 	.word	0xcccccccd

000d4ca0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d4ca0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d4ca2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d4ca4:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d4ca6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d4ca8:	b30b      	cbz	r3, d4cee <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d4caa:	b301      	cbz	r1, d4cee <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d4cac:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d4cae:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d4cb2:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d4cb4:	a903      	add	r1, sp, #12
   d4cb6:	a801      	add	r0, sp, #4
   d4cb8:	f7ff ff36 	bl	d4b28 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d4cbc:	4601      	mov	r1, r0
   d4cbe:	b1b0      	cbz	r0, d4cee <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d4cc0:	f10d 030b 	add.w	r3, sp, #11
   d4cc4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d4cc6:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d4cca:	4620      	mov	r0, r4
   d4ccc:	f7ff ffaa 	bl	d4c24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d4cd0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4cd4:	b15b      	cbz	r3, d4cee <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d4cd6:	6824      	ldr	r4, [r4, #0]
   d4cd8:	2314      	movs	r3, #20
   d4cda:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d4cde:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d4ce2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d4ce6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d4ce8:	bfa8      	it	ge
   d4cea:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d4cec:	e7e2      	b.n	d4cb4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d4cee:	4630      	mov	r0, r6
   d4cf0:	b004      	add	sp, #16
   d4cf2:	bd70      	pop	{r4, r5, r6, pc}

000d4cf4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d4cf4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d4cf6:	4c0a      	ldr	r4, [pc, #40]	; (d4d20 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d4cf8:	7823      	ldrb	r3, [r4, #0]
   d4cfa:	f3bf 8f5b 	dmb	ish
   d4cfe:	07db      	lsls	r3, r3, #31
   d4d00:	d40b      	bmi.n	d4d1a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d4d02:	4620      	mov	r0, r4
   d4d04:	f7ff f9d6 	bl	d40b4 <__cxa_guard_acquire>
   d4d08:	b138      	cbz	r0, d4d1a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d4d0a:	4620      	mov	r0, r4
   d4d0c:	f7ff f9d7 	bl	d40be <__cxa_guard_release>
   d4d10:	4a04      	ldr	r2, [pc, #16]	; (d4d24 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d4d12:	4905      	ldr	r1, [pc, #20]	; (d4d28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d4d14:	4805      	ldr	r0, [pc, #20]	; (d4d2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d4d16:	f001 fc95 	bl	d6644 <__aeabi_atexit>
}
   d4d1a:	4804      	ldr	r0, [pc, #16]	; (d4d2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d4d1c:	bd10      	pop	{r4, pc}
   d4d1e:	bf00      	nop
   d4d20:	2003e630 	.word	0x2003e630
   d4d24:	2003e5e4 	.word	0x2003e5e4
   d4d28:	000d4b25 	.word	0x000d4b25
   d4d2c:	2003e574 	.word	0x2003e574

000d4d30 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d4d30:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d4d32:	4c0a      	ldr	r4, [pc, #40]	; (d4d5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d4d34:	7823      	ldrb	r3, [r4, #0]
   d4d36:	f3bf 8f5b 	dmb	ish
   d4d3a:	07db      	lsls	r3, r3, #31
   d4d3c:	d40b      	bmi.n	d4d56 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d4d3e:	4620      	mov	r0, r4
   d4d40:	f7ff f9b8 	bl	d40b4 <__cxa_guard_acquire>
   d4d44:	b138      	cbz	r0, d4d56 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d4d46:	4620      	mov	r0, r4
   d4d48:	f7ff f9b9 	bl	d40be <__cxa_guard_release>
   d4d4c:	4a04      	ldr	r2, [pc, #16]	; (d4d60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d4d4e:	4905      	ldr	r1, [pc, #20]	; (d4d64 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d4d50:	4805      	ldr	r0, [pc, #20]	; (d4d68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d4d52:	f001 fc77 	bl	d6644 <__aeabi_atexit>
    return &factory;
}
   d4d56:	4804      	ldr	r0, [pc, #16]	; (d4d68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d4d58:	bd10      	pop	{r4, pc}
   d4d5a:	bf00      	nop
   d4d5c:	2003e634 	.word	0x2003e634
   d4d60:	2003e5e4 	.word	0x2003e5e4
   d4d64:	000d4b23 	.word	0x000d4b23
   d4d68:	2003e578 	.word	0x2003e578

000d4d6c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d4d6c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d4d6e:	2500      	movs	r5, #0
   d4d70:	4604      	mov	r4, r0
   d4d72:	e9c0 5500 	strd	r5, r5, [r0]
   d4d76:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d4d7a:	6085      	str	r5, [r0, #8]
   d4d7c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d4d7e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d4d82:	f7ff fb23 	bl	d43cc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d4d86:	f7ff ffb5 	bl	d4cf4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d4d8a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d4d8c:	f7ff ffd0 	bl	d4d30 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d4d90:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d4d92:	6220      	str	r0, [r4, #32]
}
   d4d94:	4620      	mov	r0, r4
   d4d96:	bd38      	pop	{r3, r4, r5, pc}

000d4d98 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d4d98:	b510      	push	{r4, lr}
    static LogManager mgr;
   d4d9a:	4c0b      	ldr	r4, [pc, #44]	; (d4dc8 <_ZN5spark10LogManager8instanceEv+0x30>)
   d4d9c:	7823      	ldrb	r3, [r4, #0]
   d4d9e:	f3bf 8f5b 	dmb	ish
   d4da2:	07db      	lsls	r3, r3, #31
   d4da4:	d40e      	bmi.n	d4dc4 <_ZN5spark10LogManager8instanceEv+0x2c>
   d4da6:	4620      	mov	r0, r4
   d4da8:	f7ff f984 	bl	d40b4 <__cxa_guard_acquire>
   d4dac:	b150      	cbz	r0, d4dc4 <_ZN5spark10LogManager8instanceEv+0x2c>
   d4dae:	4807      	ldr	r0, [pc, #28]	; (d4dcc <_ZN5spark10LogManager8instanceEv+0x34>)
   d4db0:	f7ff ffdc 	bl	d4d6c <_ZN5spark10LogManagerC1Ev>
   d4db4:	4620      	mov	r0, r4
   d4db6:	f7ff f982 	bl	d40be <__cxa_guard_release>
   d4dba:	4a05      	ldr	r2, [pc, #20]	; (d4dd0 <_ZN5spark10LogManager8instanceEv+0x38>)
   d4dbc:	4905      	ldr	r1, [pc, #20]	; (d4dd4 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d4dbe:	4803      	ldr	r0, [pc, #12]	; (d4dcc <_ZN5spark10LogManager8instanceEv+0x34>)
   d4dc0:	f001 fc40 	bl	d6644 <__aeabi_atexit>
    return &mgr;
}
   d4dc4:	4801      	ldr	r0, [pc, #4]	; (d4dcc <_ZN5spark10LogManager8instanceEv+0x34>)
   d4dc6:	bd10      	pop	{r4, pc}
   d4dc8:	2003e62c 	.word	0x2003e62c
   d4dcc:	2003e63c 	.word	0x2003e63c
   d4dd0:	2003e5e4 	.word	0x2003e5e4
   d4dd4:	000d522d 	.word	0x000d522d

000d4dd8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d4dd8:	4a02      	ldr	r2, [pc, #8]	; (d4de4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d4dda:	4903      	ldr	r1, [pc, #12]	; (d4de8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d4ddc:	4803      	ldr	r0, [pc, #12]	; (d4dec <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d4dde:	2300      	movs	r3, #0
   d4de0:	f7ff bc0c 	b.w	d45fc <log_set_callbacks>
   d4de4:	000d5109 	.word	0x000d5109
   d4de8:	000d5095 	.word	0x000d5095
   d4dec:	000d5015 	.word	0x000d5015

000d4df0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d4df0:	2300      	movs	r3, #0
   d4df2:	461a      	mov	r2, r3
   d4df4:	4619      	mov	r1, r3
   d4df6:	4618      	mov	r0, r3
   d4df8:	f7ff bc00 	b.w	d45fc <log_set_callbacks>

000d4dfc <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d4dfe:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e00:	f851 3b04 	ldr.w	r3, [r1], #4
   d4e04:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4e06:	4604      	mov	r4, r0
   d4e08:	a801      	add	r0, sp, #4
   d4e0a:	f7ff fdd2 	bl	d49b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d4e0e:	466a      	mov	r2, sp
   d4e10:	4629      	mov	r1, r5
   d4e12:	4620      	mov	r0, r4
   d4e14:	f001 fa1a 	bl	d624c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e18:	a801      	add	r0, sp, #4
   d4e1a:	f7ff fdd1 	bl	d49c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4e1e:	4620      	mov	r0, r4
   d4e20:	b003      	add	sp, #12
   d4e22:	bd30      	pop	{r4, r5, pc}

000d4e24 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d4e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d4e26:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e28:	f851 3b04 	ldr.w	r3, [r1], #4
   d4e2c:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d4e2e:	4604      	mov	r4, r0
   d4e30:	a801      	add	r0, sp, #4
   d4e32:	f7ff fdbe 	bl	d49b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d4e36:	466a      	mov	r2, sp
   d4e38:	4629      	mov	r1, r5
   d4e3a:	4620      	mov	r0, r4
   d4e3c:	f001 fa82 	bl	d6344 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4e40:	a801      	add	r0, sp, #4
   d4e42:	f7ff fdbd 	bl	d49c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4e46:	4620      	mov	r0, r4
   d4e48:	b003      	add	sp, #12
   d4e4a:	bd30      	pop	{r4, r5, pc}

000d4e4c <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4e4e:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e50:	f851 3b04 	ldr.w	r3, [r1], #4
   d4e54:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4e56:	4604      	mov	r4, r0
   d4e58:	a801      	add	r0, sp, #4
   d4e5a:	f7ff fdaa 	bl	d49b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d4e5e:	466a      	mov	r2, sp
   d4e60:	4629      	mov	r1, r5
   d4e62:	4620      	mov	r0, r4
   d4e64:	f001 fa4a 	bl	d62fc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4e68:	a801      	add	r0, sp, #4
   d4e6a:	f7ff fda9 	bl	d49c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4e6e:	4620      	mov	r0, r4
   d4e70:	b003      	add	sp, #12
   d4e72:	bd30      	pop	{r4, r5, pc}

000d4e74 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d4e74:	b570      	push	{r4, r5, r6, lr}
   d4e76:	b08a      	sub	sp, #40	; 0x28
   d4e78:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d4e7a:	4601      	mov	r1, r0
   d4e7c:	a804      	add	r0, sp, #16
   d4e7e:	f7ff ffd1 	bl	d4e24 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d4e82:	4e14      	ldr	r6, [pc, #80]	; (d4ed4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d4e84:	a804      	add	r0, sp, #16
   d4e86:	f001 fa75 	bl	d6374 <_ZN5spark18JSONObjectIterator4nextEv>
   d4e8a:	b1e8      	cbz	r0, d4ec8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d4e8c:	a904      	add	r1, sp, #16
   d4e8e:	4668      	mov	r0, sp
   d4e90:	f7ff ffdc 	bl	d4e4c <_ZNK5spark18JSONObjectIterator4nameEv>
   d4e94:	9802      	ldr	r0, [sp, #8]
   d4e96:	4631      	mov	r1, r6
   d4e98:	f7ff fe6d 	bl	d4b76 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d4e9c:	4604      	mov	r4, r0
   d4e9e:	b110      	cbz	r0, d4ea6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d4ea0:	1e2c      	subs	r4, r5, #0
   d4ea2:	bf18      	it	ne
   d4ea4:	2401      	movne	r4, #1
   d4ea6:	a801      	add	r0, sp, #4
   d4ea8:	f7ff fd8a 	bl	d49c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4eac:	2c00      	cmp	r4, #0
   d4eae:	d0e9      	beq.n	d4e84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d4eb0:	a904      	add	r1, sp, #16
   d4eb2:	4668      	mov	r0, sp
   d4eb4:	f7ff ffa2 	bl	d4dfc <_ZNK5spark18JSONObjectIterator5valueEv>
   d4eb8:	4668      	mov	r0, sp
   d4eba:	f001 f9fd 	bl	d62b8 <_ZNK5spark9JSONValue5toIntEv>
   d4ebe:	6028      	str	r0, [r5, #0]
   d4ec0:	a801      	add	r0, sp, #4
   d4ec2:	f7ff fd7d 	bl	d49c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ec6:	e7dd      	b.n	d4e84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d4ec8:	a805      	add	r0, sp, #20
   d4eca:	f7ff fd79 	bl	d49c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4ece:	b00a      	add	sp, #40	; 0x28
   d4ed0:	bd70      	pop	{r4, r5, r6, pc}
   d4ed2:	bf00      	nop
   d4ed4:	000d696c 	.word	0x000d696c

000d4ed8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d4ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4eda:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d4edc:	4620      	mov	r0, r4
   d4ede:	4912      	ldr	r1, [pc, #72]	; (d4f28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d4ee0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d4ee2:	f001 fc34 	bl	d674e <strcmp>
   d4ee6:	b948      	cbnz	r0, d4efc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d4ee8:	f000 ff58 	bl	d5d9c <_Z16_fetch_usbserialv>
   d4eec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4ef0:	f000 ff44 	bl	d5d7c <_ZN9USBSerial5beginEl>
        return &Serial;
   d4ef4:	f000 ff52 	bl	d5d9c <_Z16_fetch_usbserialv>
}
   d4ef8:	b003      	add	sp, #12
   d4efa:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d4efc:	490b      	ldr	r1, [pc, #44]	; (d4f2c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d4efe:	4620      	mov	r0, r4
   d4f00:	f001 fc25 	bl	d674e <strcmp>
   d4f04:	b970      	cbnz	r0, d4f24 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d4f06:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d4f0a:	a901      	add	r1, sp, #4
   d4f0c:	4628      	mov	r0, r5
        int baud = 9600;
   d4f0e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d4f10:	f7ff ffb0 	bl	d4e74 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d4f14:	f000 ffca 	bl	d5eac <_Z22__fetch_global_Serial1v>
   d4f18:	9901      	ldr	r1, [sp, #4]
   d4f1a:	f000 ffc1 	bl	d5ea0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d4f1e:	f000 ffc5 	bl	d5eac <_Z22__fetch_global_Serial1v>
   d4f22:	e7e9      	b.n	d4ef8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d4f24:	2000      	movs	r0, #0
   d4f26:	e7e7      	b.n	d4ef8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d4f28:	000d6971 	.word	0x000d6971
   d4f2c:	000d6978 	.word	0x000d6978

000d4f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4f30:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4f32:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4f36:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4f38:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4f3a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4f3e:	42ae      	cmp	r6, r5
   d4f40:	d005      	beq.n	d4f4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d4f42:	f105 0008 	add.w	r0, r5, #8
   d4f46:	f7ff fff3 	bl	d4f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d4f4a:	3514      	adds	r5, #20
   d4f4c:	e7f7      	b.n	d4f3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4f4e:	6820      	ldr	r0, [r4, #0]
   d4f50:	f7ff fbe0 	bl	d4714 <free>
}
   d4f54:	4620      	mov	r0, r4
   d4f56:	bd70      	pop	{r4, r5, r6, pc}

000d4f58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4f58:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4f5a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4f5e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4f60:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d4f64:	42ae      	cmp	r6, r5
   d4f66:	d004      	beq.n	d4f72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d4f68:	4628      	mov	r0, r5
   d4f6a:	f7ff fc69 	bl	d4840 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d4f6e:	3510      	adds	r5, #16
   d4f70:	e7f8      	b.n	d4f64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d4f72:	6820      	ldr	r0, [r4, #0]
   d4f74:	f7ff fbce 	bl	d4714 <free>
}
   d4f78:	4620      	mov	r0, r4
   d4f7a:	bd70      	pop	{r4, r5, r6, pc}

000d4f7c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d4f7c:	b510      	push	{r4, lr}
   d4f7e:	4604      	mov	r4, r0
   d4f80:	300c      	adds	r0, #12
   d4f82:	f7ff ffd5 	bl	d4f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d4f86:	4620      	mov	r0, r4
   d4f88:	f7ff ffe6 	bl	d4f58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d4f8c:	4620      	mov	r0, r4
   d4f8e:	bd10      	pop	{r4, pc}

000d4f90 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d4f90:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d4f92:	4b04      	ldr	r3, [pc, #16]	; (d4fa4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d4f94:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d4f96:	f840 3b04 	str.w	r3, [r0], #4
   d4f9a:	f7ff ffef 	bl	d4f7c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	bd10      	pop	{r4, pc}
   d4fa2:	bf00      	nop
   d4fa4:	000d6910 	.word	0x000d6910

000d4fa8 <_ZN5spark16StreamLogHandlerD0Ev>:
   d4fa8:	b510      	push	{r4, lr}
   d4faa:	4604      	mov	r4, r0
   d4fac:	f7ff fff0 	bl	d4f90 <_ZN5spark16StreamLogHandlerD1Ev>
   d4fb0:	4620      	mov	r0, r4
   d4fb2:	2124      	movs	r1, #36	; 0x24
   d4fb4:	f001 fb4b 	bl	d664e <_ZdlPvj>
   d4fb8:	4620      	mov	r0, r4
   d4fba:	bd10      	pop	{r4, pc}

000d4fbc <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d4fbc:	b510      	push	{r4, lr}
   d4fbe:	4b03      	ldr	r3, [pc, #12]	; (d4fcc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d4fc0:	6003      	str	r3, [r0, #0]
   d4fc2:	4604      	mov	r4, r0
   d4fc4:	f7ff ffe4 	bl	d4f90 <_ZN5spark16StreamLogHandlerD1Ev>
   d4fc8:	4620      	mov	r0, r4
   d4fca:	bd10      	pop	{r4, pc}
   d4fcc:	000d6a18 	.word	0x000d6a18

000d4fd0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d4fd0:	b510      	push	{r4, lr}
   d4fd2:	4604      	mov	r4, r0
   d4fd4:	f7ff fff2 	bl	d4fbc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d4fd8:	4620      	mov	r0, r4
   d4fda:	2124      	movs	r1, #36	; 0x24
   d4fdc:	f001 fb37 	bl	d664e <_ZdlPvj>
   d4fe0:	4620      	mov	r0, r4
   d4fe2:	bd10      	pop	{r4, pc}

000d4fe4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d4fe4:	2200      	movs	r2, #0
   d4fe6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d4fea:	b510      	push	{r4, lr}
        capacity_(0) {
   d4fec:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4fee:	680c      	ldr	r4, [r1, #0]
   d4ff0:	6004      	str	r4, [r0, #0]
   d4ff2:	684c      	ldr	r4, [r1, #4]
   d4ff4:	6044      	str	r4, [r0, #4]
   d4ff6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ff8:	600a      	str	r2, [r1, #0]
   d4ffa:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4ffc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ffe:	608a      	str	r2, [r1, #8]
}
   d5000:	bd10      	pop	{r4, pc}

000d5002 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5002:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d5004:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d5006:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5008:	6818      	ldr	r0, [r3, #0]
   d500a:	f7ff f9f7 	bl	d43fc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d500e:	4620      	mov	r0, r4
   d5010:	bd10      	pop	{r4, pc}
	...

000d5014 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5018:	b087      	sub	sp, #28
   d501a:	4680      	mov	r8, r0
   d501c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d501e:	4b1c      	ldr	r3, [pc, #112]	; (d5090 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d5020:	685b      	ldr	r3, [r3, #4]
   d5022:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5026:	4689      	mov	r9, r1
   d5028:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d502a:	b96b      	cbnz	r3, d5048 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d502c:	f7ff feb4 	bl	d4d98 <_ZN5spark10LogManager8instanceEv>
   d5030:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5032:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d5036:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5038:	9305      	str	r3, [sp, #20]
   d503a:	f7ff f9d7 	bl	d43ec <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d503e:	7b23      	ldrb	r3, [r4, #12]
   d5040:	b12b      	cbz	r3, d504e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d5042:	a805      	add	r0, sp, #20
   d5044:	f7ff ffdd 	bl	d5002 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5048:	b007      	add	sp, #28
   d504a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d504e:	2301      	movs	r3, #1
   d5050:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d5052:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d5056:	fa5f f989 	uxtb.w	r9, r9
   d505a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d505e:	45aa      	cmp	sl, r5
   d5060:	d012      	beq.n	d5088 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d5062:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d5066:	4631      	mov	r1, r6
   d5068:	1d38      	adds	r0, r7, #4
   d506a:	f7ff fe19 	bl	d4ca0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d506e:	4581      	cmp	r9, r0
   d5070:	d3f5      	bcc.n	d505e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d5072:	683b      	ldr	r3, [r7, #0]
   d5074:	9a03      	ldr	r2, [sp, #12]
   d5076:	9200      	str	r2, [sp, #0]
   d5078:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d507c:	464a      	mov	r2, r9
   d507e:	4633      	mov	r3, r6
   d5080:	4641      	mov	r1, r8
   d5082:	4638      	mov	r0, r7
   d5084:	47d8      	blx	fp
   d5086:	e7ea      	b.n	d505e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d5088:	2300      	movs	r3, #0
   d508a:	7323      	strb	r3, [r4, #12]
   d508c:	e7d9      	b.n	d5042 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d508e:	bf00      	nop
   d5090:	e000ed00 	.word	0xe000ed00

000d5094 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5098:	469b      	mov	fp, r3
   d509a:	4b1a      	ldr	r3, [pc, #104]	; (d5104 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d509c:	685b      	ldr	r3, [r3, #4]
   d509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d50a2:	4680      	mov	r8, r0
   d50a4:	4689      	mov	r9, r1
   d50a6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d50a8:	b96b      	cbnz	r3, d50c6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d50aa:	f7ff fe75 	bl	d4d98 <_ZN5spark10LogManager8instanceEv>
   d50ae:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d50b0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d50b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d50b6:	9301      	str	r3, [sp, #4]
   d50b8:	f7ff f998 	bl	d43ec <os_mutex_recursive_lock>
        if (that->isActive()) {
   d50bc:	7b23      	ldrb	r3, [r4, #12]
   d50be:	b12b      	cbz	r3, d50cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d50c0:	a801      	add	r0, sp, #4
   d50c2:	f7ff ff9e 	bl	d5002 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d50c6:	b003      	add	sp, #12
   d50c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d50cc:	2301      	movs	r3, #1
   d50ce:	7323      	strb	r3, [r4, #12]
   d50d0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d50d4:	b2f6      	uxtb	r6, r6
   d50d6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d50da:	4555      	cmp	r5, sl
   d50dc:	d00e      	beq.n	d50fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d50de:	f855 7b04 	ldr.w	r7, [r5], #4
   d50e2:	4659      	mov	r1, fp
   d50e4:	1d38      	adds	r0, r7, #4
   d50e6:	f7ff fddb 	bl	d4ca0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d50ea:	4286      	cmp	r6, r0
   d50ec:	d3f5      	bcc.n	d50da <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d50ee:	683b      	ldr	r3, [r7, #0]
   d50f0:	464a      	mov	r2, r9
   d50f2:	68db      	ldr	r3, [r3, #12]
   d50f4:	4641      	mov	r1, r8
   d50f6:	4638      	mov	r0, r7
   d50f8:	4798      	blx	r3
   d50fa:	e7ee      	b.n	d50da <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d50fc:	2300      	movs	r3, #0
   d50fe:	7323      	strb	r3, [r4, #12]
   d5100:	e7de      	b.n	d50c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d5102:	bf00      	nop
   d5104:	e000ed00 	.word	0xe000ed00

000d5108 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d5108:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d510c:	4b16      	ldr	r3, [pc, #88]	; (d5168 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d510e:	685b      	ldr	r3, [r3, #4]
   d5110:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5114:	4605      	mov	r5, r0
   d5116:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d5118:	bb1b      	cbnz	r3, d5162 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d511a:	f7ff fe3d 	bl	d4d98 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d511e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d5122:	4604      	mov	r4, r0
   d5124:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5126:	9301      	str	r3, [sp, #4]
   d5128:	f7ff f960 	bl	d43ec <os_mutex_recursive_lock>
   d512c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d5130:	2446      	movs	r4, #70	; 0x46
   d5132:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5136:	45b0      	cmp	r8, r6
   d5138:	d109      	bne.n	d514e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d513a:	a801      	add	r0, sp, #4
   d513c:	f7ff ff61 	bl	d5002 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d5140:	42a5      	cmp	r5, r4
   d5142:	bfb4      	ite	lt
   d5144:	2000      	movlt	r0, #0
   d5146:	2001      	movge	r0, #1
}
   d5148:	b002      	add	sp, #8
   d514a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d514e:	f856 0b04 	ldr.w	r0, [r6], #4
   d5152:	4639      	mov	r1, r7
   d5154:	3004      	adds	r0, #4
   d5156:	f7ff fda3 	bl	d4ca0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d515a:	4284      	cmp	r4, r0
   d515c:	bfa8      	it	ge
   d515e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d5160:	e7e9      	b.n	d5136 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d5162:	2000      	movs	r0, #0
   d5164:	e7f0      	b.n	d5148 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d5166:	bf00      	nop
   d5168:	e000ed00 	.word	0xe000ed00

000d516c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d516c:	b570      	push	{r4, r5, r6, lr}
   d516e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d5170:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5174:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d5176:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d517a:	4282      	cmp	r2, r0
   d517c:	d007      	beq.n	d518e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d517e:	4601      	mov	r1, r0
            if (*p == value) {
   d5180:	681d      	ldr	r5, [r3, #0]
   d5182:	f851 6b04 	ldr.w	r6, [r1], #4
   d5186:	42ae      	cmp	r6, r5
   d5188:	d003      	beq.n	d5192 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d518a:	4608      	mov	r0, r1
   d518c:	e7f5      	b.n	d517a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d518e:	2000      	movs	r0, #0
}
   d5190:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5192:	1a52      	subs	r2, r2, r1
   d5194:	f001 fa7e 	bl	d6694 <memmove>
    --size_;
   d5198:	6863      	ldr	r3, [r4, #4]
   d519a:	3b01      	subs	r3, #1
   d519c:	6063      	str	r3, [r4, #4]
    return true;
   d519e:	2001      	movs	r0, #1
   d51a0:	e7f6      	b.n	d5190 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d51a2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d51a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d51a4:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d51a8:	4604      	mov	r4, r0
   d51aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d51ac:	9101      	str	r1, [sp, #4]
   d51ae:	9303      	str	r3, [sp, #12]
   d51b0:	f7ff f91c 	bl	d43ec <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d51b4:	a901      	add	r1, sp, #4
   d51b6:	4620      	mov	r0, r4
   d51b8:	f7ff ffd8 	bl	d516c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d51bc:	b118      	cbz	r0, d51c6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d51be:	6863      	ldr	r3, [r4, #4]
   d51c0:	b90b      	cbnz	r3, d51c6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d51c2:	f7ff fe15 	bl	d4df0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d51c6:	a803      	add	r0, sp, #12
   d51c8:	f7ff ff1b 	bl	d5002 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d51cc:	b004      	add	sp, #16
   d51ce:	bd10      	pop	{r4, pc}

000d51d0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d51d0:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d51d2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d51d6:	2318      	movs	r3, #24
   d51d8:	4604      	mov	r4, r0
   d51da:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d51de:	42ae      	cmp	r6, r5
   d51e0:	d015      	beq.n	d520e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d51e2:	f105 0110 	add.w	r1, r5, #16
   d51e6:	4620      	mov	r0, r4
   d51e8:	f7ff ffc0 	bl	d516c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d51ec:	6863      	ldr	r3, [r4, #4]
   d51ee:	b90b      	cbnz	r3, d51f4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d51f0:	f7ff fdfe 	bl	d4df0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d51f4:	69e0      	ldr	r0, [r4, #28]
   d51f6:	6929      	ldr	r1, [r5, #16]
   d51f8:	6803      	ldr	r3, [r0, #0]
   d51fa:	68db      	ldr	r3, [r3, #12]
   d51fc:	4798      	blx	r3
        if (h.stream) {
   d51fe:	6969      	ldr	r1, [r5, #20]
   d5200:	b119      	cbz	r1, d520a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d5202:	6a20      	ldr	r0, [r4, #32]
   d5204:	6803      	ldr	r3, [r0, #0]
   d5206:	68db      	ldr	r3, [r3, #12]
   d5208:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d520a:	3518      	adds	r5, #24
   d520c:	e7e7      	b.n	d51de <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d520e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5212:	2618      	movs	r6, #24
   d5214:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5218:	42ae      	cmp	r6, r5
   d521a:	d004      	beq.n	d5226 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d521c:	4628      	mov	r0, r5
   d521e:	f7ff fb0f 	bl	d4840 <_ZN6StringD1Ev>
   d5222:	3518      	adds	r5, #24
   d5224:	e7f8      	b.n	d5218 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d5226:	2300      	movs	r3, #0
   d5228:	6163      	str	r3, [r4, #20]
}
   d522a:	bd70      	pop	{r4, r5, r6, pc}

000d522c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d522c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d522e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d5230:	f7ff fdde 	bl	d4df0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5234:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d5238:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d523a:	9301      	str	r3, [sp, #4]
   d523c:	f7ff f8d6 	bl	d43ec <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d5240:	4620      	mov	r0, r4
   d5242:	f7ff ffc5 	bl	d51d0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d5246:	a801      	add	r0, sp, #4
   d5248:	f7ff fedb 	bl	d5002 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d524c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d524e:	b108      	cbz	r0, d5254 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d5250:	f7ff f8c4 	bl	d43dc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d5254:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5258:	2618      	movs	r6, #24
   d525a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d525e:	42ae      	cmp	r6, r5
   d5260:	d004      	beq.n	d526c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d5262:	4628      	mov	r0, r5
   d5264:	f7ff faec 	bl	d4840 <_ZN6StringD1Ev>
   d5268:	3518      	adds	r5, #24
   d526a:	e7f8      	b.n	d525e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d526c:	6920      	ldr	r0, [r4, #16]
   d526e:	f7ff fa51 	bl	d4714 <free>
   d5272:	6820      	ldr	r0, [r4, #0]
   d5274:	f7ff fa4e 	bl	d4714 <free>
}
   d5278:	4620      	mov	r0, r4
   d527a:	b002      	add	sp, #8
   d527c:	bd70      	pop	{r4, r5, r6, pc}

000d527e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d527e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5282:	4606      	mov	r6, r0
   d5284:	460c      	mov	r4, r1
   d5286:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5288:	d927      	bls.n	d52da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d528a:	4290      	cmp	r0, r2
   d528c:	d226      	bcs.n	d52dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d528e:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d5292:	1a6c      	subs	r4, r5, r1
   d5294:	f1a1 0714 	sub.w	r7, r1, #20
   d5298:	4404      	add	r4, r0
        capacity_(0) {
   d529a:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d529c:	42af      	cmp	r7, r5
   d529e:	d03d      	beq.n	d531c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d52a0:	b1a4      	cbz	r4, d52cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d52a2:	682b      	ldr	r3, [r5, #0]
   d52a4:	6023      	str	r3, [r4, #0]
   d52a6:	88ab      	ldrh	r3, [r5, #4]
   d52a8:	80a3      	strh	r3, [r4, #4]
   d52aa:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d52ae:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d52b0:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d52b4:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d52b6:	68ab      	ldr	r3, [r5, #8]
   d52b8:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d52ba:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52bc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d52be:	68ea      	ldr	r2, [r5, #12]
   d52c0:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d52c2:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52c4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d52c6:	692a      	ldr	r2, [r5, #16]
   d52c8:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d52ca:	612b      	str	r3, [r5, #16]
   d52cc:	f105 0008 	add.w	r0, r5, #8
   d52d0:	f7ff fe2e 	bl	d4f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d52d4:	3d14      	subs	r5, #20
   d52d6:	3c14      	subs	r4, #20
   d52d8:	e7e0      	b.n	d529c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d52da:	d01f      	beq.n	d531c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d52dc:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d52de:	42ac      	cmp	r4, r5
   d52e0:	d01c      	beq.n	d531c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d52e2:	b1a6      	cbz	r6, d530e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d52e4:	6823      	ldr	r3, [r4, #0]
   d52e6:	6033      	str	r3, [r6, #0]
   d52e8:	88a3      	ldrh	r3, [r4, #4]
   d52ea:	80b3      	strh	r3, [r6, #4]
   d52ec:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d52f0:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d52f2:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d52f6:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d52f8:	68a3      	ldr	r3, [r4, #8]
   d52fa:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d52fc:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52fe:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5300:	68e2      	ldr	r2, [r4, #12]
   d5302:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5304:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5306:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5308:	6922      	ldr	r2, [r4, #16]
   d530a:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d530c:	6123      	str	r3, [r4, #16]
   d530e:	f104 0008 	add.w	r0, r4, #8
   d5312:	f7ff fe0d 	bl	d4f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d5316:	3414      	adds	r4, #20
   d5318:	3614      	adds	r6, #20
   d531a:	e7e0      	b.n	d52de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d531c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d531e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d531e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5320:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d5324:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5326:	4604      	mov	r4, r0
   d5328:	460e      	mov	r6, r1
   d532a:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d532c:	db0d      	blt.n	d534a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d532e:	3501      	adds	r5, #1
        if (n > 0) {
   d5330:	2d00      	cmp	r5, #0
   d5332:	6800      	ldr	r0, [r0, #0]
   d5334:	dd04      	ble.n	d5340 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d5336:	00a9      	lsls	r1, r5, #2
   d5338:	f7ff f9f4 	bl	d4724 <realloc>
            if (!d) {
   d533c:	b918      	cbnz	r0, d5346 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d533e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d5340:	f7ff f9e8 	bl	d4714 <free>
        T* d = nullptr;
   d5344:	2000      	movs	r0, #0
        data_ = d;
   d5346:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5348:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d534a:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d534c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d534e:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d5352:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5354:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d5358:	1d08      	adds	r0, r1, #4
   d535a:	f001 f99b 	bl	d6694 <memmove>
    new(p) T(std::move(value));
   d535e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d5362:	6863      	ldr	r3, [r4, #4]
   d5364:	3301      	adds	r3, #1
   d5366:	6063      	str	r3, [r4, #4]
    return true;
   d5368:	2001      	movs	r0, #1
   d536a:	e7e8      	b.n	d533e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d536c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d536c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d536e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5372:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d5374:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5376:	9301      	str	r3, [sp, #4]
   d5378:	460d      	mov	r5, r1
   d537a:	f7ff f837 	bl	d43ec <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d537e:	e9d4 3100 	ldrd	r3, r1, [r4]
   d5382:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d5386:	4283      	cmp	r3, r0
   d5388:	461a      	mov	r2, r3
   d538a:	d00b      	beq.n	d53a4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d538c:	6812      	ldr	r2, [r2, #0]
   d538e:	42aa      	cmp	r2, r5
   d5390:	f103 0304 	add.w	r3, r3, #4
   d5394:	d1f7      	bne.n	d5386 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d5396:	a801      	add	r0, sp, #4
   d5398:	f7ff fe33 	bl	d5002 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d539c:	2500      	movs	r5, #0
}
   d539e:	4628      	mov	r0, r5
   d53a0:	b003      	add	sp, #12
   d53a2:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d53a4:	462a      	mov	r2, r5
   d53a6:	4620      	mov	r0, r4
   d53a8:	f7ff ffb9 	bl	d531e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d53ac:	4605      	mov	r5, r0
   d53ae:	2800      	cmp	r0, #0
   d53b0:	d0f1      	beq.n	d5396 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d53b2:	6863      	ldr	r3, [r4, #4]
   d53b4:	2b01      	cmp	r3, #1
   d53b6:	d101      	bne.n	d53bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d53b8:	f7ff fd0e 	bl	d4dd8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d53bc:	a801      	add	r0, sp, #4
   d53be:	f7ff fe20 	bl	d5002 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d53c2:	e7ec      	b.n	d539e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d53c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d53c4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d53c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53c8:	4604      	mov	r4, r0
   d53ca:	460d      	mov	r5, r1
   d53cc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d53ce:	d914      	bls.n	d53fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d53d0:	4290      	cmp	r0, r2
   d53d2:	d213      	bcs.n	d53fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d53d4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d53d8:	1a75      	subs	r5, r6, r1
   d53da:	f1a1 0710 	sub.w	r7, r1, #16
   d53de:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d53e0:	42b7      	cmp	r7, r6
   d53e2:	d018      	beq.n	d5416 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d53e4:	b11c      	cbz	r4, d53ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d53e6:	4631      	mov	r1, r6
   d53e8:	4620      	mov	r0, r4
   d53ea:	f7ff faa5 	bl	d4938 <_ZN6StringC1EOS_>
                end->~T();
   d53ee:	4630      	mov	r0, r6
   d53f0:	f7ff fa26 	bl	d4840 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d53f4:	3e10      	subs	r6, #16
   d53f6:	3c10      	subs	r4, #16
   d53f8:	e7f2      	b.n	d53e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d53fa:	d00c      	beq.n	d5416 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d53fc:	42b5      	cmp	r5, r6
   d53fe:	d00a      	beq.n	d5416 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d5400:	b11c      	cbz	r4, d540a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d5402:	4629      	mov	r1, r5
   d5404:	4620      	mov	r0, r4
   d5406:	f7ff fa97 	bl	d4938 <_ZN6StringC1EOS_>
                p->~T();
   d540a:	4628      	mov	r0, r5
   d540c:	f7ff fa18 	bl	d4840 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5410:	3510      	adds	r5, #16
   d5412:	3410      	adds	r4, #16
   d5414:	e7f2      	b.n	d53fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d5416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5418 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d5418:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d541a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d541c:	4605      	mov	r5, r0
        if (n > 0) {
   d541e:	dd11      	ble.n	d5444 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d5420:	0130      	lsls	r0, r6, #4
   d5422:	f7ff f96f 	bl	d4704 <malloc>
            if (!d) {
   d5426:	4604      	mov	r4, r0
   d5428:	b158      	cbz	r0, d5442 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d542a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d542e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d5432:	f7ff ffc7 	bl	d53c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5436:	6828      	ldr	r0, [r5, #0]
   d5438:	f7ff f96c 	bl	d4714 <free>
        data_ = d;
   d543c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d543e:	60ae      	str	r6, [r5, #8]
        return true;
   d5440:	2001      	movs	r0, #1
    }
   d5442:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5444:	2400      	movs	r4, #0
   d5446:	e7f6      	b.n	d5436 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d5448 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d544c:	4691      	mov	r9, r2
   d544e:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d5450:	2300      	movs	r3, #0
   d5452:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d5454:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d5458:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d545a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d545c:	4299      	cmp	r1, r3
        capacity_(0) {
   d545e:	e9c0 3300 	strd	r3, r3, [r0]
   d5462:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5466:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d546a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d546e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5470:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d5472:	dc23      	bgt.n	d54bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d5474:	e9d9 5700 	ldrd	r5, r7, [r9]
   d5478:	2314      	movs	r3, #20
   d547a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d547e:	42af      	cmp	r7, r5
   d5480:	d03b      	beq.n	d54fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d5482:	4629      	mov	r1, r5
   d5484:	a80d      	add	r0, sp, #52	; 0x34
   d5486:	f7ff fa57 	bl	d4938 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d548a:	a90d      	add	r1, sp, #52	; 0x34
   d548c:	a811      	add	r0, sp, #68	; 0x44
   d548e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d5490:	f7ff fa52 	bl	d4938 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5494:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d5498:	4299      	cmp	r1, r3
   d549a:	da1b      	bge.n	d54d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d549c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d549e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d54a0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d54a4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d54a8:	4631      	mov	r1, r6
   d54aa:	f106 0010 	add.w	r0, r6, #16
   d54ae:	f7ff ff89 	bl	d53c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d54b2:	b9ee      	cbnz	r6, d54f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d54b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d54b6:	3301      	adds	r3, #1
   d54b8:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d54ba:	e011      	b.n	d54e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d54bc:	a80a      	add	r0, sp, #40	; 0x28
   d54be:	f7ff ffab 	bl	d5418 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d54c2:	2800      	cmp	r0, #0
   d54c4:	d1d6      	bne.n	d5474 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d54c6:	a80a      	add	r0, sp, #40	; 0x28
   d54c8:	f7ff fd46 	bl	d4f58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d54cc:	4620      	mov	r0, r4
   d54ce:	b017      	add	sp, #92	; 0x5c
   d54d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d54d4:	3101      	adds	r1, #1
   d54d6:	a80a      	add	r0, sp, #40	; 0x28
   d54d8:	f7ff ff9e 	bl	d5418 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d54dc:	2800      	cmp	r0, #0
   d54de:	d1dd      	bne.n	d549c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d54e0:	a811      	add	r0, sp, #68	; 0x44
   d54e2:	f7ff f9ad 	bl	d4840 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d54e6:	a80d      	add	r0, sp, #52	; 0x34
   d54e8:	f7ff f9aa 	bl	d4840 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d54ec:	3514      	adds	r5, #20
   d54ee:	e7c6      	b.n	d547e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d54f0:	a911      	add	r1, sp, #68	; 0x44
   d54f2:	4630      	mov	r0, r6
   d54f4:	f7ff fa20 	bl	d4938 <_ZN6StringC1EOS_>
   d54f8:	e7dc      	b.n	d54b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d54fa:	2600      	movs	r6, #0
   d54fc:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d5500:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d5502:	4637      	mov	r7, r6
   d5504:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d5508:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d550c:	429e      	cmp	r6, r3
   d550e:	f280 8097 	bge.w	d5640 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d5512:	0133      	lsls	r3, r6, #4
   d5514:	58d3      	ldr	r3, [r2, r3]
   d5516:	9308      	str	r3, [sp, #32]
        if (!category) {
   d5518:	b90b      	cbnz	r3, d551e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d551a:	3601      	adds	r6, #1
   d551c:	e7f4      	b.n	d5508 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d551e:	fb0a f306 	mul.w	r3, sl, r6
   d5522:	9709      	str	r7, [sp, #36]	; 0x24
   d5524:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d5526:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d5528:	a909      	add	r1, sp, #36	; 0x24
   d552a:	a808      	add	r0, sp, #32
   d552c:	f7ff fafc 	bl	d4b28 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5530:	4683      	mov	fp, r0
   d5532:	2800      	cmp	r0, #0
   d5534:	d0f1      	beq.n	d551a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5536:	4601      	mov	r1, r0
   d5538:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d553a:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d553e:	f10d 031f 	add.w	r3, sp, #31
   d5542:	4628      	mov	r0, r5
   d5544:	f7ff fb6e 	bl	d4c24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5548:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d554c:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d554e:	f1b8 0f00 	cmp.w	r8, #0
   d5552:	d166      	bne.n	d5622 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5554:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d5558:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d555c:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d5560:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5564:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d5568:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d556c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5570:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d5574:	4293      	cmp	r3, r2
   d5576:	db1a      	blt.n	d55ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d5578:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d557c:	f1bb 0f00 	cmp.w	fp, #0
   d5580:	dd4a      	ble.n	d5618 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d5582:	fb0a f00b 	mul.w	r0, sl, fp
   d5586:	f7ff f8bd 	bl	d4704 <malloc>
            if (!d) {
   d558a:	9004      	str	r0, [sp, #16]
   d558c:	2800      	cmp	r0, #0
   d558e:	d045      	beq.n	d561c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d5590:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5594:	fb0a 1202 	mla	r2, sl, r2, r1
   d5598:	f7ff fe71 	bl	d527e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d559c:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d559e:	6828      	ldr	r0, [r5, #0]
   d55a0:	9304      	str	r3, [sp, #16]
   d55a2:	f7ff f8b7 	bl	d4714 <free>
        data_ = d;
   d55a6:	9b04      	ldr	r3, [sp, #16]
   d55a8:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d55aa:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d55ae:	9b01      	ldr	r3, [sp, #4]
   d55b0:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d55b4:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d55b6:	fb0a f303 	mul.w	r3, sl, r3
   d55ba:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d55be:	f101 0014 	add.w	r0, r1, #20
   d55c2:	fb0a b202 	mla	r2, sl, r2, fp
   d55c6:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d55c8:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d55ca:	f7ff fe58 	bl	d527e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d55ce:	9904      	ldr	r1, [sp, #16]
   d55d0:	b1a9      	cbz	r1, d55fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d55d2:	9b05      	ldr	r3, [sp, #20]
   d55d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d55d6:	f84b 2003 	str.w	r2, [fp, r3]
   d55da:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d55de:	808b      	strh	r3, [r1, #4]
   d55e0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d55e4:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d55e6:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d55ea:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d55ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d55ee:	608b      	str	r3, [r1, #8]
   d55f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d55f2:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d55f4:	60cb      	str	r3, [r1, #12]
   d55f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d55f8:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d55fa:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d55fc:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d55fe:	686b      	ldr	r3, [r5, #4]
   d5600:	3301      	adds	r3, #1
   d5602:	606b      	str	r3, [r5, #4]
   d5604:	a813      	add	r0, sp, #76	; 0x4c
   d5606:	f7ff fc93 	bl	d4f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d560a:	f1b8 0f00 	cmp.w	r8, #0
   d560e:	d008      	beq.n	d5622 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d5610:	a80d      	add	r0, sp, #52	; 0x34
   d5612:	f7ff fc8d 	bl	d4f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5616:	e756      	b.n	d54c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d5618:	4643      	mov	r3, r8
   d561a:	e7c0      	b.n	d559e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d561c:	f04f 0801 	mov.w	r8, #1
   d5620:	e7f0      	b.n	d5604 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d5622:	9b01      	ldr	r3, [sp, #4]
   d5624:	682d      	ldr	r5, [r5, #0]
   d5626:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d562a:	9b08      	ldr	r3, [sp, #32]
   d562c:	781b      	ldrb	r3, [r3, #0]
   d562e:	b92b      	cbnz	r3, d563c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d5630:	f8d9 3000 	ldr.w	r3, [r9]
   d5634:	9a02      	ldr	r2, [sp, #8]
   d5636:	4413      	add	r3, r2
   d5638:	7c1b      	ldrb	r3, [r3, #16]
   d563a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d563c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d563e:	e773      	b.n	d5528 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5640:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5642:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5644:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5646:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5648:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d564a:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d564c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d564e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5650:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5652:	60a2      	str	r2, [r4, #8]
   d5654:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d5656:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5658:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d565a:	60e2      	str	r2, [r4, #12]
   d565c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d565e:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5660:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5662:	6122      	str	r2, [r4, #16]
   d5664:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5666:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d5668:	9b03      	ldr	r3, [sp, #12]
   d566a:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d566c:	6162      	str	r2, [r4, #20]
   d566e:	7623      	strb	r3, [r4, #24]
   d5670:	e7ce      	b.n	d5610 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d5674 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5674:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5676:	4605      	mov	r5, r0
   d5678:	4b09      	ldr	r3, [pc, #36]	; (d56a0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d567a:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d567e:	4604      	mov	r4, r0
   d5680:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5682:	a801      	add	r0, sp, #4
   d5684:	4611      	mov	r1, r2
   d5686:	f7fe fdda 	bl	d423e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d568a:	aa01      	add	r2, sp, #4
   d568c:	4631      	mov	r1, r6
   d568e:	4628      	mov	r0, r5
   d5690:	f7ff feda 	bl	d5448 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5694:	a801      	add	r0, sp, #4
   d5696:	f7fe fd79 	bl	d418c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d569a:	4620      	mov	r0, r4
   d569c:	b004      	add	sp, #16
   d569e:	bd70      	pop	{r4, r5, r6, pc}
   d56a0:	000d6910 	.word	0x000d6910

000d56a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d56a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56a6:	460f      	mov	r7, r1
   d56a8:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d56aa:	4926      	ldr	r1, [pc, #152]	; (d5744 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d56ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d56ae:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d56b0:	4616      	mov	r6, r2
   d56b2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d56b4:	f001 f84b 	bl	d674e <strcmp>
   d56b8:	bb00      	cbnz	r0, d56fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d56ba:	b1e4      	cbz	r4, d56f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d56bc:	4629      	mov	r1, r5
   d56be:	4668      	mov	r0, sp
   d56c0:	f7ff fc90 	bl	d4fe4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d56c4:	4920      	ldr	r1, [pc, #128]	; (d5748 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d56c6:	2024      	movs	r0, #36	; 0x24
   d56c8:	f000 ffc3 	bl	d6652 <_ZnwjRKSt9nothrow_t>
   d56cc:	4605      	mov	r5, r0
   d56ce:	b170      	cbz	r0, d56ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d56d0:	4669      	mov	r1, sp
   d56d2:	a803      	add	r0, sp, #12
   d56d4:	f7fe fdb3 	bl	d423e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d56d8:	aa03      	add	r2, sp, #12
   d56da:	4631      	mov	r1, r6
   d56dc:	4628      	mov	r0, r5
   d56de:	f7ff ffc9 	bl	d5674 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d56e2:	a803      	add	r0, sp, #12
   d56e4:	f7fe fd52 	bl	d418c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d56e8:	4b18      	ldr	r3, [pc, #96]	; (d574c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d56ea:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d56ec:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d56ee:	4668      	mov	r0, sp
   d56f0:	f7fe fd4c 	bl	d418c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d56f4:	462c      	mov	r4, r5
}
   d56f6:	4620      	mov	r0, r4
   d56f8:	b007      	add	sp, #28
   d56fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d56fc:	4914      	ldr	r1, [pc, #80]	; (d5750 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d56fe:	4638      	mov	r0, r7
   d5700:	f001 f825 	bl	d674e <strcmp>
   d5704:	b9e0      	cbnz	r0, d5740 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d5706:	2c00      	cmp	r4, #0
   d5708:	d0f5      	beq.n	d56f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d570a:	4629      	mov	r1, r5
   d570c:	4668      	mov	r0, sp
   d570e:	f7ff fc69 	bl	d4fe4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5712:	490d      	ldr	r1, [pc, #52]	; (d5748 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5714:	2024      	movs	r0, #36	; 0x24
   d5716:	f000 ff9c 	bl	d6652 <_ZnwjRKSt9nothrow_t>
   d571a:	4605      	mov	r5, r0
   d571c:	2800      	cmp	r0, #0
   d571e:	d0e6      	beq.n	d56ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5720:	4669      	mov	r1, sp
   d5722:	a803      	add	r0, sp, #12
   d5724:	f7fe fd8b 	bl	d423e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5728:	aa03      	add	r2, sp, #12
   d572a:	4631      	mov	r1, r6
   d572c:	4628      	mov	r0, r5
   d572e:	f7ff ffa1 	bl	d5674 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5732:	a803      	add	r0, sp, #12
   d5734:	f7fe fd2a 	bl	d418c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5738:	4b06      	ldr	r3, [pc, #24]	; (d5754 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d573a:	602b      	str	r3, [r5, #0]
   d573c:	622c      	str	r4, [r5, #32]
}
   d573e:	e7d6      	b.n	d56ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d5740:	2400      	movs	r4, #0
   d5742:	e7d8      	b.n	d56f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d5744:	000d6980 	.word	0x000d6980
   d5748:	000d6b81 	.word	0x000d6b81
   d574c:	000d6a18 	.word	0x000d6a18
   d5750:	000d6984 	.word	0x000d6984
   d5754:	000d6a00 	.word	0x000d6a00

000d5758 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d5758:	4b01      	ldr	r3, [pc, #4]	; (d5760 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d575a:	4a02      	ldr	r2, [pc, #8]	; (d5764 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d575c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d575e:	4770      	bx	lr
   d5760:	2003e638 	.word	0x2003e638
   d5764:	000d6903 	.word	0x000d6903

000d5768 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d576c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d576e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5772:	4604      	mov	r4, r0
   d5774:	460e      	mov	r6, r1
   d5776:	4617      	mov	r7, r2
   d5778:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d577a:	f000 fb0f 	bl	d5d9c <_Z16_fetch_usbserialv>
   d577e:	4581      	cmp	r9, r0
   d5780:	d04c      	beq.n	d581c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d5782:	792b      	ldrb	r3, [r5, #4]
   d5784:	0719      	lsls	r1, r3, #28
   d5786:	d504      	bpl.n	d5792 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d5788:	696a      	ldr	r2, [r5, #20]
   d578a:	4954      	ldr	r1, [pc, #336]	; (d58dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d578c:	4620      	mov	r0, r4
   d578e:	f7ff fa3a 	bl	d4c06 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d5792:	f1b8 0f00 	cmp.w	r8, #0
   d5796:	d00d      	beq.n	d57b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d5798:	215b      	movs	r1, #91	; 0x5b
   d579a:	4620      	mov	r0, r4
   d579c:	f7ff fa27 	bl	d4bee <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d57a0:	4641      	mov	r1, r8
   d57a2:	4620      	mov	r0, r4
   d57a4:	f7ff fa14 	bl	d4bd0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d57a8:	6823      	ldr	r3, [r4, #0]
   d57aa:	494d      	ldr	r1, [pc, #308]	; (d58e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d57ac:	68db      	ldr	r3, [r3, #12]
   d57ae:	2202      	movs	r2, #2
   d57b0:	4620      	mov	r0, r4
   d57b2:	4798      	blx	r3
    if (attr.has_file) {
   d57b4:	792b      	ldrb	r3, [r5, #4]
   d57b6:	07da      	lsls	r2, r3, #31
   d57b8:	d523      	bpl.n	d5802 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d57ba:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d57be:	212f      	movs	r1, #47	; 0x2f
   d57c0:	4640      	mov	r0, r8
   d57c2:	f000 fff0 	bl	d67a6 <strrchr>
    if (s1) {
   d57c6:	b108      	cbz	r0, d57cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d57c8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d57cc:	4641      	mov	r1, r8
   d57ce:	4620      	mov	r0, r4
   d57d0:	f7ff f9fe 	bl	d4bd0 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d57d4:	792b      	ldrb	r3, [r5, #4]
   d57d6:	079b      	lsls	r3, r3, #30
   d57d8:	d508      	bpl.n	d57ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d57da:	213a      	movs	r1, #58	; 0x3a
   d57dc:	4620      	mov	r0, r4
   d57de:	f7ff fa06 	bl	d4bee <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d57e2:	68ea      	ldr	r2, [r5, #12]
   d57e4:	493f      	ldr	r1, [pc, #252]	; (d58e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d57e6:	4620      	mov	r0, r4
   d57e8:	f7ff fa0d 	bl	d4c06 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d57ec:	792a      	ldrb	r2, [r5, #4]
   d57ee:	6823      	ldr	r3, [r4, #0]
   d57f0:	f012 0f04 	tst.w	r2, #4
   d57f4:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d57f6:	bf14      	ite	ne
   d57f8:	493b      	ldrne	r1, [pc, #236]	; (d58e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d57fa:	493c      	ldreq	r1, [pc, #240]	; (d58ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d57fc:	2202      	movs	r2, #2
            write(": ", 2);
   d57fe:	4620      	mov	r0, r4
   d5800:	4798      	blx	r3
    if (attr.has_function) {
   d5802:	792b      	ldrb	r3, [r5, #4]
   d5804:	0758      	lsls	r0, r3, #29
   d5806:	d51d      	bpl.n	d5844 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5808:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d580a:	460b      	mov	r3, r1
   d580c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d580e:	f813 0b01 	ldrb.w	r0, [r3], #1
   d5812:	b160      	cbz	r0, d582e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d5814:	2820      	cmp	r0, #32
   d5816:	d108      	bne.n	d582a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d5818:	4619      	mov	r1, r3
   d581a:	e7f7      	b.n	d580c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d581c:	4834      	ldr	r0, [pc, #208]	; (d58f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d581e:	f000 fc1a 	bl	d6056 <_ZN5spark12NetworkClass9listeningEv>
   d5822:	2800      	cmp	r0, #0
   d5824:	d0ad      	beq.n	d5782 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d5826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d582a:	2828      	cmp	r0, #40	; 0x28
   d582c:	d1ee      	bne.n	d580c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d582e:	6823      	ldr	r3, [r4, #0]
   d5830:	1a52      	subs	r2, r2, r1
   d5832:	68db      	ldr	r3, [r3, #12]
   d5834:	4620      	mov	r0, r4
   d5836:	4798      	blx	r3
        write("(): ", 4);
   d5838:	6823      	ldr	r3, [r4, #0]
   d583a:	492e      	ldr	r1, [pc, #184]	; (d58f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d583c:	68db      	ldr	r3, [r3, #12]
   d583e:	2204      	movs	r2, #4
   d5840:	4620      	mov	r0, r4
   d5842:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d5844:	2100      	movs	r1, #0
   d5846:	4638      	mov	r0, r7
   d5848:	f7fe fed0 	bl	d45ec <log_level_name>
   d584c:	4601      	mov	r1, r0
    write(s);
   d584e:	4620      	mov	r0, r4
   d5850:	f7ff f9be 	bl	d4bd0 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d5854:	6823      	ldr	r3, [r4, #0]
   d5856:	4925      	ldr	r1, [pc, #148]	; (d58ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d5858:	68db      	ldr	r3, [r3, #12]
   d585a:	2202      	movs	r2, #2
   d585c:	4620      	mov	r0, r4
   d585e:	4798      	blx	r3
    if (msg) {
   d5860:	b11e      	cbz	r6, d586a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d5862:	4631      	mov	r1, r6
   d5864:	4620      	mov	r0, r4
   d5866:	f7ff f9b3 	bl	d4bd0 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d586a:	792b      	ldrb	r3, [r5, #4]
   d586c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d5870:	d02c      	beq.n	d58cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d5872:	6823      	ldr	r3, [r4, #0]
   d5874:	4920      	ldr	r1, [pc, #128]	; (d58f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d5876:	68db      	ldr	r3, [r3, #12]
   d5878:	2202      	movs	r2, #2
   d587a:	4620      	mov	r0, r4
   d587c:	4798      	blx	r3
        if (attr.has_code) {
   d587e:	792b      	ldrb	r3, [r5, #4]
   d5880:	06d9      	lsls	r1, r3, #27
   d5882:	d50a      	bpl.n	d589a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d5884:	6823      	ldr	r3, [r4, #0]
   d5886:	491d      	ldr	r1, [pc, #116]	; (d58fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d5888:	68db      	ldr	r3, [r3, #12]
   d588a:	2207      	movs	r2, #7
   d588c:	4620      	mov	r0, r4
   d588e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d5890:	69aa      	ldr	r2, [r5, #24]
   d5892:	491b      	ldr	r1, [pc, #108]	; (d5900 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d5894:	4620      	mov	r0, r4
   d5896:	f7ff f9b6 	bl	d4c06 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d589a:	792b      	ldrb	r3, [r5, #4]
   d589c:	069a      	lsls	r2, r3, #26
   d589e:	d511      	bpl.n	d58c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d58a0:	06db      	lsls	r3, r3, #27
   d58a2:	d505      	bpl.n	d58b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d58a4:	6823      	ldr	r3, [r4, #0]
   d58a6:	4910      	ldr	r1, [pc, #64]	; (d58e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d58a8:	68db      	ldr	r3, [r3, #12]
   d58aa:	2202      	movs	r2, #2
   d58ac:	4620      	mov	r0, r4
   d58ae:	4798      	blx	r3
            write("details = ", 10);
   d58b0:	6823      	ldr	r3, [r4, #0]
   d58b2:	4914      	ldr	r1, [pc, #80]	; (d5904 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d58b4:	68db      	ldr	r3, [r3, #12]
   d58b6:	4620      	mov	r0, r4
   d58b8:	220a      	movs	r2, #10
   d58ba:	4798      	blx	r3
            write(attr.details);
   d58bc:	69e9      	ldr	r1, [r5, #28]
   d58be:	4620      	mov	r0, r4
   d58c0:	f7ff f986 	bl	d4bd0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d58c4:	215d      	movs	r1, #93	; 0x5d
   d58c6:	4620      	mov	r0, r4
   d58c8:	f7ff f991 	bl	d4bee <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d58cc:	6823      	ldr	r3, [r4, #0]
   d58ce:	490e      	ldr	r1, [pc, #56]	; (d5908 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d58d0:	68db      	ldr	r3, [r3, #12]
   d58d2:	4620      	mov	r0, r4
   d58d4:	2202      	movs	r2, #2
}
   d58d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d58da:	4718      	bx	r3
   d58dc:	000d6995 	.word	0x000d6995
   d58e0:	000d699c 	.word	0x000d699c
   d58e4:	000d699f 	.word	0x000d699f
   d58e8:	000d69a2 	.word	0x000d69a2
   d58ec:	000d69a7 	.word	0x000d69a7
   d58f0:	2003e7c0 	.word	0x2003e7c0
   d58f4:	000d69a5 	.word	0x000d69a5
   d58f8:	000d69aa 	.word	0x000d69aa
   d58fc:	000d69ad 	.word	0x000d69ad
   d5900:	000d6900 	.word	0x000d6900
   d5904:	000d69b5 	.word	0x000d69b5
   d5908:	000d69c0 	.word	0x000d69c0

000d590c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d590c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5910:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d5912:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5916:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d5918:	4605      	mov	r5, r0
   d591a:	460f      	mov	r7, r1
   d591c:	4690      	mov	r8, r2
   d591e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d5920:	f000 fa3c 	bl	d5d9c <_Z16_fetch_usbserialv>
   d5924:	4581      	cmp	r9, r0
   d5926:	d105      	bne.n	d5934 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d5928:	4849      	ldr	r0, [pc, #292]	; (d5a50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d592a:	f000 fb94 	bl	d6056 <_ZN5spark12NetworkClass9listeningEv>
   d592e:	2800      	cmp	r0, #0
   d5930:	f040 808a 	bne.w	d5a48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d5934:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d5936:	4a47      	ldr	r2, [pc, #284]	; (d5a54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5938:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d593a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d593e:	a801      	add	r0, sp, #4
        strm_(stream) {
   d5940:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d5942:	f88d 9008 	strb.w	r9, [sp, #8]
   d5946:	f000 fd3e 	bl	d63c6 <_ZN5spark10JSONWriter11beginObjectEv>
   d594a:	4649      	mov	r1, r9
   d594c:	4640      	mov	r0, r8
   d594e:	f7fe fe4d 	bl	d45ec <log_level_name>
    json.name("l", 1).value(s);
   d5952:	4941      	ldr	r1, [pc, #260]	; (d5a58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5954:	4680      	mov	r8, r0
   d5956:	2201      	movs	r2, #1
   d5958:	a801      	add	r0, sp, #4
   d595a:	f000 fdbd 	bl	d64d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d595e:	4641      	mov	r1, r8
   d5960:	f7ff f928 	bl	d4bb4 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d5964:	b13f      	cbz	r7, d5976 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d5966:	493d      	ldr	r1, [pc, #244]	; (d5a5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5968:	2201      	movs	r2, #1
   d596a:	a801      	add	r0, sp, #4
   d596c:	f000 fdb4 	bl	d64d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5970:	4639      	mov	r1, r7
   d5972:	f7ff f91f 	bl	d4bb4 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d5976:	b13e      	cbz	r6, d5988 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d5978:	4939      	ldr	r1, [pc, #228]	; (d5a60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d597a:	2201      	movs	r2, #1
   d597c:	a801      	add	r0, sp, #4
   d597e:	f000 fdab 	bl	d64d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5982:	4631      	mov	r1, r6
   d5984:	f7ff f916 	bl	d4bb4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d5988:	7923      	ldrb	r3, [r4, #4]
   d598a:	07df      	lsls	r7, r3, #31
   d598c:	d50e      	bpl.n	d59ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d598e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d5990:	212f      	movs	r1, #47	; 0x2f
   d5992:	4630      	mov	r0, r6
   d5994:	f000 ff07 	bl	d67a6 <strrchr>
    if (s1) {
   d5998:	b100      	cbz	r0, d599c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d599a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d599c:	4931      	ldr	r1, [pc, #196]	; (d5a64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d599e:	2201      	movs	r2, #1
   d59a0:	a801      	add	r0, sp, #4
   d59a2:	f000 fd99 	bl	d64d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d59a6:	4631      	mov	r1, r6
   d59a8:	f7ff f904 	bl	d4bb4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d59ac:	7923      	ldrb	r3, [r4, #4]
   d59ae:	079e      	lsls	r6, r3, #30
   d59b0:	d507      	bpl.n	d59c2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d59b2:	492d      	ldr	r1, [pc, #180]	; (d5a68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d59b4:	2202      	movs	r2, #2
   d59b6:	a801      	add	r0, sp, #4
   d59b8:	f000 fd8e 	bl	d64d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d59bc:	68e1      	ldr	r1, [r4, #12]
   d59be:	f000 fd0f 	bl	d63e0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d59c2:	7923      	ldrb	r3, [r4, #4]
   d59c4:	0758      	lsls	r0, r3, #29
   d59c6:	d514      	bpl.n	d59f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d59c8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d59ca:	4633      	mov	r3, r6
   d59cc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d59ce:	f813 2b01 	ldrb.w	r2, [r3], #1
   d59d2:	b12a      	cbz	r2, d59e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d59d4:	2a20      	cmp	r2, #32
   d59d6:	d101      	bne.n	d59dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d59d8:	461e      	mov	r6, r3
   d59da:	e7f7      	b.n	d59cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d59dc:	2a28      	cmp	r2, #40	; 0x28
   d59de:	d1f5      	bne.n	d59cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d59e0:	4922      	ldr	r1, [pc, #136]	; (d5a6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d59e2:	2202      	movs	r2, #2
   d59e4:	a801      	add	r0, sp, #4
   d59e6:	f000 fd77 	bl	d64d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d59ea:	1bba      	subs	r2, r7, r6
   d59ec:	4631      	mov	r1, r6
   d59ee:	f000 fd83 	bl	d64f8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d59f2:	7923      	ldrb	r3, [r4, #4]
   d59f4:	0719      	lsls	r1, r3, #28
   d59f6:	d507      	bpl.n	d5a08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d59f8:	491d      	ldr	r1, [pc, #116]	; (d5a70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d59fa:	2201      	movs	r2, #1
   d59fc:	a801      	add	r0, sp, #4
   d59fe:	f000 fd6b 	bl	d64d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5a02:	6961      	ldr	r1, [r4, #20]
   d5a04:	f000 fcfe 	bl	d6404 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d5a08:	7923      	ldrb	r3, [r4, #4]
   d5a0a:	06da      	lsls	r2, r3, #27
   d5a0c:	d508      	bpl.n	d5a20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d5a0e:	2204      	movs	r2, #4
   d5a10:	4918      	ldr	r1, [pc, #96]	; (d5a74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d5a12:	eb0d 0002 	add.w	r0, sp, r2
   d5a16:	f000 fd5f 	bl	d64d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5a1a:	69a1      	ldr	r1, [r4, #24]
   d5a1c:	f000 fce0 	bl	d63e0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d5a20:	7923      	ldrb	r3, [r4, #4]
   d5a22:	069b      	lsls	r3, r3, #26
   d5a24:	d507      	bpl.n	d5a36 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d5a26:	4914      	ldr	r1, [pc, #80]	; (d5a78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d5a28:	2206      	movs	r2, #6
   d5a2a:	a801      	add	r0, sp, #4
   d5a2c:	f000 fd54 	bl	d64d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5a30:	69e1      	ldr	r1, [r4, #28]
   d5a32:	f7ff f8bf 	bl	d4bb4 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d5a36:	a801      	add	r0, sp, #4
   d5a38:	f000 fcaf 	bl	d639a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d5a3c:	6a28      	ldr	r0, [r5, #32]
   d5a3e:	490f      	ldr	r1, [pc, #60]	; (d5a7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d5a40:	6803      	ldr	r3, [r0, #0]
   d5a42:	2202      	movs	r2, #2
   d5a44:	68db      	ldr	r3, [r3, #12]
   d5a46:	4798      	blx	r3
}
   d5a48:	b005      	add	sp, #20
   d5a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5a4e:	bf00      	nop
   d5a50:	2003e7c0 	.word	0x2003e7c0
   d5a54:	000d69e8 	.word	0x000d69e8
   d5a58:	000d6976 	.word	0x000d6976
   d5a5c:	000d69c3 	.word	0x000d69c3
   d5a60:	000d69c5 	.word	0x000d69c5
   d5a64:	000d69c7 	.word	0x000d69c7
   d5a68:	000d69c9 	.word	0x000d69c9
   d5a6c:	000d69cc 	.word	0x000d69cc
   d5a70:	000d69cf 	.word	0x000d69cf
   d5a74:	000d69d1 	.word	0x000d69d1
   d5a78:	000d69d6 	.word	0x000d69d6
   d5a7c:	000d69c0 	.word	0x000d69c0

000d5a80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5a80:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a86:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5a88:	4770      	bx	lr
   d5a8a:	bf00      	nop
   d5a8c:	2003e57c 	.word	0x2003e57c
   d5a90:	2003e664 	.word	0x2003e664

000d5a94 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5a94:	2100      	movs	r1, #0
   d5a96:	f7fe bdc1 	b.w	d461c <system_delay_ms>

000d5a9a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a9a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5a9c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5a9e:	4604      	mov	r4, r0
      if (_M_manager)
   d5aa0:	b113      	cbz	r3, d5aa8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5aa2:	2203      	movs	r2, #3
   d5aa4:	4601      	mov	r1, r0
   d5aa6:	4798      	blx	r3
    }
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	bd10      	pop	{r4, pc}

000d5aac <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5aac:	b510      	push	{r4, lr}
   d5aae:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5ab0:	f7ff fff3 	bl	d5a9a <_ZNSt14_Function_baseD1Ev>
   d5ab4:	4620      	mov	r0, r4
   d5ab6:	bd10      	pop	{r4, pc}

000d5ab8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5ab8:	4803      	ldr	r0, [pc, #12]	; (d5ac8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5aba:	4a04      	ldr	r2, [pc, #16]	; (d5acc <_GLOBAL__sub_I_RGB+0x14>)
   d5abc:	4904      	ldr	r1, [pc, #16]	; (d5ad0 <_GLOBAL__sub_I_RGB+0x18>)
   d5abe:	2300      	movs	r3, #0
   d5ac0:	6083      	str	r3, [r0, #8]
   d5ac2:	f000 bdbf 	b.w	d6644 <__aeabi_atexit>
   d5ac6:	bf00      	nop
   d5ac8:	2003e668 	.word	0x2003e668
   d5acc:	2003e5e4 	.word	0x2003e5e4
   d5ad0:	000d5aad 	.word	0x000d5aad

000d5ad4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5ad4:	4b01      	ldr	r3, [pc, #4]	; (d5adc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5ad6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5ad8:	4770      	bx	lr
   d5ada:	bf00      	nop
   d5adc:	2003e580 	.word	0x2003e580

000d5ae0 <serialEventRun>:
{
   d5ae0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5ae2:	4b0b      	ldr	r3, [pc, #44]	; (d5b10 <serialEventRun+0x30>)
   d5ae4:	b143      	cbz	r3, d5af8 <serialEventRun+0x18>
   d5ae6:	f000 f959 	bl	d5d9c <_Z16_fetch_usbserialv>
   d5aea:	6803      	ldr	r3, [r0, #0]
   d5aec:	691b      	ldr	r3, [r3, #16]
   d5aee:	4798      	blx	r3
   d5af0:	2800      	cmp	r0, #0
   d5af2:	dd01      	ble.n	d5af8 <serialEventRun+0x18>
        serialEvent();
   d5af4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5af8:	4b06      	ldr	r3, [pc, #24]	; (d5b14 <serialEventRun+0x34>)
   d5afa:	b143      	cbz	r3, d5b0e <serialEventRun+0x2e>
   d5afc:	f000 f9d6 	bl	d5eac <_Z22__fetch_global_Serial1v>
   d5b00:	6803      	ldr	r3, [r0, #0]
   d5b02:	691b      	ldr	r3, [r3, #16]
   d5b04:	4798      	blx	r3
   d5b06:	2800      	cmp	r0, #0
   d5b08:	dd01      	ble.n	d5b0e <serialEventRun+0x2e>
        serialEvent1();
   d5b0a:	f3af 8000 	nop.w
}
   d5b0e:	bd08      	pop	{r3, pc}
	...

000d5b18 <_post_loop>:
{
   d5b18:	b508      	push	{r3, lr}
	serialEventRun();
   d5b1a:	f7ff ffe1 	bl	d5ae0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5b1e:	f7fe fc4d 	bl	d43bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5b22:	4b01      	ldr	r3, [pc, #4]	; (d5b28 <_post_loop+0x10>)
   d5b24:	6018      	str	r0, [r3, #0]
}
   d5b26:	bd08      	pop	{r3, pc}
   d5b28:	2003e7d4 	.word	0x2003e7d4

000d5b2c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5b2c:	4802      	ldr	r0, [pc, #8]	; (d5b38 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5b2e:	4a03      	ldr	r2, [pc, #12]	; (d5b3c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5b30:	4903      	ldr	r1, [pc, #12]	; (d5b40 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5b32:	1a12      	subs	r2, r2, r0
   d5b34:	f000 bda0 	b.w	d6678 <memcpy>
   d5b38:	2003f400 	.word	0x2003f400
   d5b3c:	2003f404 	.word	0x2003f404
   d5b40:	000d6cb0 	.word	0x000d6cb0

000d5b44 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5b44:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b46:	2300      	movs	r3, #0
   d5b48:	9300      	str	r3, [sp, #0]
   d5b4a:	461a      	mov	r2, r3
   d5b4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b50:	f7fe fd76 	bl	d4640 <system_ctrl_set_result>
}
   d5b54:	b003      	add	sp, #12
   d5b56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5b5c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5b5c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5b5e:	8843      	ldrh	r3, [r0, #2]
   d5b60:	2b0a      	cmp	r3, #10
   d5b62:	d008      	beq.n	d5b76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5b64:	2b50      	cmp	r3, #80	; 0x50
   d5b66:	d10b      	bne.n	d5b80 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5b68:	4b09      	ldr	r3, [pc, #36]	; (d5b90 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5b6a:	681b      	ldr	r3, [r3, #0]
   d5b6c:	b14b      	cbz	r3, d5b82 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5b6e:	b003      	add	sp, #12
   d5b70:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5b74:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5b76:	f7ff ffe5 	bl	d5b44 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5b7a:	b003      	add	sp, #12
   d5b7c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b80:	2300      	movs	r3, #0
   d5b82:	9300      	str	r3, [sp, #0]
   d5b84:	461a      	mov	r2, r3
   d5b86:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b8a:	f7fe fd59 	bl	d4640 <system_ctrl_set_result>
}
   d5b8e:	e7f4      	b.n	d5b7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5b90:	2003e67c 	.word	0x2003e67c

000d5b94 <module_user_init_hook>:
{
   d5b94:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5b96:	4c12      	ldr	r4, [pc, #72]	; (d5be0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5b98:	4812      	ldr	r0, [pc, #72]	; (d5be4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5b9a:	4d13      	ldr	r5, [pc, #76]	; (d5be8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5b9c:	2100      	movs	r1, #0
   d5b9e:	f7fe fdd1 	bl	d4744 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5ba2:	6823      	ldr	r3, [r4, #0]
   d5ba4:	42ab      	cmp	r3, r5
   d5ba6:	4b11      	ldr	r3, [pc, #68]	; (d5bec <module_user_init_hook+0x58>)
   d5ba8:	bf0c      	ite	eq
   d5baa:	2201      	moveq	r2, #1
   d5bac:	2200      	movne	r2, #0
   d5bae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5bb0:	d002      	beq.n	d5bb8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5bb2:	f7ff ffbb 	bl	d5b2c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5bb6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5bb8:	f7fe fbf0 	bl	d439c <HAL_RNG_GetRandomNumber>
   d5bbc:	4604      	mov	r4, r0
    srand(seed);
   d5bbe:	f000 fd8b 	bl	d66d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5bc2:	4b0b      	ldr	r3, [pc, #44]	; (d5bf0 <module_user_init_hook+0x5c>)
   d5bc4:	b113      	cbz	r3, d5bcc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5bcc:	2100      	movs	r1, #0
   d5bce:	4808      	ldr	r0, [pc, #32]	; (d5bf0 <module_user_init_hook+0x5c>)
   d5bd0:	f7fe fd90 	bl	d46f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5bd8:	4806      	ldr	r0, [pc, #24]	; (d5bf4 <module_user_init_hook+0x60>)
   d5bda:	2100      	movs	r1, #0
   d5bdc:	f7fe bd26 	b.w	d462c <system_ctrl_set_app_request_handler>
   d5be0:	2003f400 	.word	0x2003f400
   d5be4:	000d5ad5 	.word	0x000d5ad5
   d5be8:	9a271c1e 	.word	0x9a271c1e
   d5bec:	2003e678 	.word	0x2003e678
   d5bf0:	00000000 	.word	0x00000000
   d5bf4:	000d5b5d 	.word	0x000d5b5d

000d5bf8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5bf8:	4770      	bx	lr

000d5bfa <_ZN9IPAddressD0Ev>:
   d5bfa:	b510      	push	{r4, lr}
   d5bfc:	2118      	movs	r1, #24
   d5bfe:	4604      	mov	r4, r0
   d5c00:	f000 fd25 	bl	d664e <_ZdlPvj>
   d5c04:	4620      	mov	r0, r4
   d5c06:	bd10      	pop	{r4, pc}

000d5c08 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5c08:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5c0a:	7d03      	ldrb	r3, [r0, #20]
   d5c0c:	2b06      	cmp	r3, #6
{
   d5c0e:	b08d      	sub	sp, #52	; 0x34
   d5c10:	460e      	mov	r6, r1
   d5c12:	f100 0704 	add.w	r7, r0, #4
   d5c16:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5c1a:	d012      	beq.n	d5c42 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5c1c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5c20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5c24:	220a      	movs	r2, #10
   d5c26:	4630      	mov	r0, r6
   d5c28:	f7fe ff21 	bl	d4a6e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c2c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c2e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5c30:	d019      	beq.n	d5c66 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5c32:	2c00      	cmp	r4, #0
   d5c34:	d0f4      	beq.n	d5c20 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5c36:	212e      	movs	r1, #46	; 0x2e
   d5c38:	4630      	mov	r0, r6
   d5c3a:	f7fe ff09 	bl	d4a50 <_ZN5Print5printEc>
   d5c3e:	4404      	add	r4, r0
   d5c40:	e7ee      	b.n	d5c20 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5c42:	232f      	movs	r3, #47	; 0x2f
   d5c44:	466a      	mov	r2, sp
   d5c46:	4639      	mov	r1, r7
   d5c48:	200a      	movs	r0, #10
		buf[0] = 0;
   d5c4a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5c4e:	f7fe fbdd 	bl	d440c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5c52:	4668      	mov	r0, sp
   d5c54:	f000 fd8d 	bl	d6772 <strlen>
   d5c58:	6833      	ldr	r3, [r6, #0]
   d5c5a:	4602      	mov	r2, r0
   d5c5c:	68db      	ldr	r3, [r3, #12]
   d5c5e:	4669      	mov	r1, sp
   d5c60:	4630      	mov	r0, r6
   d5c62:	4798      	blx	r3
   d5c64:	4604      	mov	r4, r0
    }
    return n;
}
   d5c66:	4620      	mov	r0, r4
   d5c68:	b00d      	add	sp, #52	; 0x34
   d5c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c6c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5c6c:	b510      	push	{r4, lr}
   d5c6e:	4b05      	ldr	r3, [pc, #20]	; (d5c84 <_ZN9IPAddressC1Ev+0x18>)
   d5c70:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5c72:	2211      	movs	r2, #17
   d5c74:	f840 3b04 	str.w	r3, [r0], #4
   d5c78:	2100      	movs	r1, #0
   d5c7a:	f000 fd25 	bl	d66c8 <memset>
}
   d5c7e:	4620      	mov	r0, r4
   d5c80:	bd10      	pop	{r4, pc}
   d5c82:	bf00      	nop
   d5c84:	000d6a7c 	.word	0x000d6a7c

000d5c88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5c88:	4603      	mov	r3, r0
   d5c8a:	4a07      	ldr	r2, [pc, #28]	; (d5ca8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5c8c:	b510      	push	{r4, lr}
   d5c8e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5c92:	f101 0210 	add.w	r2, r1, #16
   d5c96:	f851 4b04 	ldr.w	r4, [r1], #4
   d5c9a:	f843 4b04 	str.w	r4, [r3], #4
   d5c9e:	4291      	cmp	r1, r2
   d5ca0:	d1f9      	bne.n	d5c96 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5ca2:	780a      	ldrb	r2, [r1, #0]
   d5ca4:	701a      	strb	r2, [r3, #0]
}
   d5ca6:	bd10      	pop	{r4, pc}
   d5ca8:	000d6a7c 	.word	0x000d6a7c

000d5cac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5cac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5cae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5cb2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5cb6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5cba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5cbe:	2304      	movs	r3, #4
   d5cc0:	6041      	str	r1, [r0, #4]
   d5cc2:	7503      	strb	r3, [r0, #20]
}
   d5cc4:	bd10      	pop	{r4, pc}

000d5cc6 <_ZN9IPAddressaSEPKh>:
{
   d5cc6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5cc8:	78cb      	ldrb	r3, [r1, #3]
   d5cca:	9300      	str	r3, [sp, #0]
   d5ccc:	788b      	ldrb	r3, [r1, #2]
   d5cce:	784a      	ldrb	r2, [r1, #1]
   d5cd0:	7809      	ldrb	r1, [r1, #0]
   d5cd2:	f7ff ffeb 	bl	d5cac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5cd6:	b002      	add	sp, #8
   d5cd8:	bd10      	pop	{r4, pc}

000d5cda <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5cda:	7441      	strb	r1, [r0, #17]
}
   d5cdc:	4770      	bx	lr

000d5cde <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5cde:	4770      	bx	lr

000d5ce0 <_ZN9USBSerial4readEv>:
{
   d5ce0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5ce2:	2100      	movs	r1, #0
   d5ce4:	7c00      	ldrb	r0, [r0, #16]
   d5ce6:	f7fe fc59 	bl	d459c <HAL_USB_USART_Receive_Data>
}
   d5cea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5cee:	bd08      	pop	{r3, pc}

000d5cf0 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5cf0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5cf2:	2101      	movs	r1, #1
   d5cf4:	7c00      	ldrb	r0, [r0, #16]
   d5cf6:	f7fe fc51 	bl	d459c <HAL_USB_USART_Receive_Data>
}
   d5cfa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5cfe:	bd08      	pop	{r3, pc}

000d5d00 <_ZN9USBSerial17availableForWriteEv>:
{
   d5d00:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5d02:	7c00      	ldrb	r0, [r0, #16]
   d5d04:	f7fe fc42 	bl	d458c <HAL_USB_USART_Available_Data_For_Write>
}
   d5d08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d0c:	bd08      	pop	{r3, pc}

000d5d0e <_ZN9USBSerial9availableEv>:
{
   d5d0e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5d10:	7c00      	ldrb	r0, [r0, #16]
   d5d12:	f7fe fc33 	bl	d457c <HAL_USB_USART_Available_Data>
}
   d5d16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d1a:	bd08      	pop	{r3, pc}

000d5d1c <_ZN9USBSerial5writeEh>:
{
   d5d1c:	b513      	push	{r0, r1, r4, lr}
   d5d1e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d20:	7c00      	ldrb	r0, [r0, #16]
{
   d5d22:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d24:	f7fe fc32 	bl	d458c <HAL_USB_USART_Available_Data_For_Write>
   d5d28:	2800      	cmp	r0, #0
   d5d2a:	9901      	ldr	r1, [sp, #4]
   d5d2c:	dc01      	bgt.n	d5d32 <_ZN9USBSerial5writeEh+0x16>
   d5d2e:	7c60      	ldrb	r0, [r4, #17]
   d5d30:	b120      	cbz	r0, d5d3c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5d32:	7c20      	ldrb	r0, [r4, #16]
   d5d34:	f7fe fc3a 	bl	d45ac <HAL_USB_USART_Send_Data>
   d5d38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5d3c:	b002      	add	sp, #8
   d5d3e:	bd10      	pop	{r4, pc}

000d5d40 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5d40:	7c00      	ldrb	r0, [r0, #16]
   d5d42:	f7fe bc3b 	b.w	d45bc <HAL_USB_USART_Flush_Data>

000d5d46 <_ZN9USBSerialD0Ev>:
   d5d46:	b510      	push	{r4, lr}
   d5d48:	2114      	movs	r1, #20
   d5d4a:	4604      	mov	r4, r0
   d5d4c:	f000 fc7f 	bl	d664e <_ZdlPvj>
   d5d50:	4620      	mov	r0, r4
   d5d52:	bd10      	pop	{r4, pc}

000d5d54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d54:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d5a:	4604      	mov	r4, r0
   d5d5c:	4608      	mov	r0, r1
   d5d5e:	2100      	movs	r1, #0
   d5d60:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5d64:	4b04      	ldr	r3, [pc, #16]	; (d5d78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5d66:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5d68:	2301      	movs	r3, #1
  _serial = serial;
   d5d6a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5d6c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5d6e:	4611      	mov	r1, r2
   d5d70:	f7fe fbec 	bl	d454c <HAL_USB_USART_Init>
}
   d5d74:	4620      	mov	r0, r4
   d5d76:	bd10      	pop	{r4, pc}
   d5d78:	000d6a90 	.word	0x000d6a90

000d5d7c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5d7c:	7c00      	ldrb	r0, [r0, #16]
   d5d7e:	2200      	movs	r2, #0
   d5d80:	f7fe bbec 	b.w	d455c <HAL_USB_USART_Begin>

000d5d84 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d5d84:	7c00      	ldrb	r0, [r0, #16]
   d5d86:	f7fe bbf1 	b.w	d456c <HAL_USB_USART_End>

000d5d8a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5d8a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5d8c:	2214      	movs	r2, #20
{
   d5d8e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5d90:	2100      	movs	r1, #0
   d5d92:	f000 fc99 	bl	d66c8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5d96:	4620      	mov	r0, r4
   d5d98:	bd10      	pop	{r4, pc}
	...

000d5d9c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5d9c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d9e:	4c10      	ldr	r4, [pc, #64]	; (d5de0 <_Z16_fetch_usbserialv+0x44>)
{
   d5da0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5da2:	a803      	add	r0, sp, #12
   d5da4:	f7ff fff1 	bl	d5d8a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5da8:	7821      	ldrb	r1, [r4, #0]
   d5daa:	f3bf 8f5b 	dmb	ish
   d5dae:	f011 0101 	ands.w	r1, r1, #1
   d5db2:	d111      	bne.n	d5dd8 <_Z16_fetch_usbserialv+0x3c>
   d5db4:	4620      	mov	r0, r4
   d5db6:	9101      	str	r1, [sp, #4]
   d5db8:	f7fe f97c 	bl	d40b4 <__cxa_guard_acquire>
   d5dbc:	9901      	ldr	r1, [sp, #4]
   d5dbe:	b158      	cbz	r0, d5dd8 <_Z16_fetch_usbserialv+0x3c>
   d5dc0:	aa03      	add	r2, sp, #12
   d5dc2:	4808      	ldr	r0, [pc, #32]	; (d5de4 <_Z16_fetch_usbserialv+0x48>)
   d5dc4:	f7ff ffc6 	bl	d5d54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5dc8:	4620      	mov	r0, r4
   d5dca:	f7fe f978 	bl	d40be <__cxa_guard_release>
   d5dce:	4a06      	ldr	r2, [pc, #24]	; (d5de8 <_Z16_fetch_usbserialv+0x4c>)
   d5dd0:	4906      	ldr	r1, [pc, #24]	; (d5dec <_Z16_fetch_usbserialv+0x50>)
   d5dd2:	4804      	ldr	r0, [pc, #16]	; (d5de4 <_Z16_fetch_usbserialv+0x48>)
   d5dd4:	f000 fc36 	bl	d6644 <__aeabi_atexit>
	return _usbserial;
}
   d5dd8:	4802      	ldr	r0, [pc, #8]	; (d5de4 <_Z16_fetch_usbserialv+0x48>)
   d5dda:	b008      	add	sp, #32
   d5ddc:	bd10      	pop	{r4, pc}
   d5dde:	bf00      	nop
   d5de0:	2003e680 	.word	0x2003e680
   d5de4:	2003e684 	.word	0x2003e684
   d5de8:	2003e5e4 	.word	0x2003e5e4
   d5dec:	000d5cdf 	.word	0x000d5cdf

000d5df0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5df0:	4770      	bx	lr

000d5df2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5df2:	7441      	strb	r1, [r0, #17]
}
   d5df4:	4770      	bx	lr

000d5df6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5df6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5df8:	7c00      	ldrb	r0, [r0, #16]
   d5dfa:	f7fe fb4f 	bl	d449c <hal_usart_available_data_for_write>
}
   d5dfe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e02:	bd08      	pop	{r3, pc}

000d5e04 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5e04:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5e06:	7c00      	ldrb	r0, [r0, #16]
   d5e08:	f7fe fb20 	bl	d444c <hal_usart_available>
}
   d5e0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e10:	bd08      	pop	{r3, pc}

000d5e12 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5e12:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5e14:	7c00      	ldrb	r0, [r0, #16]
   d5e16:	f7fe fb29 	bl	d446c <hal_usart_peek>
}
   d5e1a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5e1e:	bd08      	pop	{r3, pc}

000d5e20 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5e20:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5e22:	7c00      	ldrb	r0, [r0, #16]
   d5e24:	f7fe fb1a 	bl	d445c <hal_usart_read>
}
   d5e28:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5e2c:	bd08      	pop	{r3, pc}

000d5e2e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5e2e:	7c00      	ldrb	r0, [r0, #16]
   d5e30:	f7fe bb24 	b.w	d447c <hal_usart_flush>

000d5e34 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5e36:	7c45      	ldrb	r5, [r0, #17]
{
   d5e38:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5e3a:	b12d      	cbz	r5, d5e48 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5e3c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5e3e:	b003      	add	sp, #12
   d5e40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5e44:	f7fe bafa 	b.w	d443c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5e48:	7c00      	ldrb	r0, [r0, #16]
   d5e4a:	9101      	str	r1, [sp, #4]
   d5e4c:	f7fe fb26 	bl	d449c <hal_usart_available_data_for_write>
   d5e50:	2800      	cmp	r0, #0
   d5e52:	9901      	ldr	r1, [sp, #4]
   d5e54:	dcf2      	bgt.n	d5e3c <_ZN11USARTSerial5writeEh+0x8>
}
   d5e56:	4628      	mov	r0, r5
   d5e58:	b003      	add	sp, #12
   d5e5a:	bd30      	pop	{r4, r5, pc}

000d5e5c <_ZN11USARTSerialD0Ev>:
   d5e5c:	b510      	push	{r4, lr}
   d5e5e:	2114      	movs	r1, #20
   d5e60:	4604      	mov	r4, r0
   d5e62:	f000 fbf4 	bl	d664e <_ZdlPvj>
   d5e66:	4620      	mov	r0, r4
   d5e68:	bd10      	pop	{r4, pc}
	...

000d5e6c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5e6c:	b510      	push	{r4, lr}
   d5e6e:	f04f 0c00 	mov.w	ip, #0
   d5e72:	4604      	mov	r4, r0
   d5e74:	4608      	mov	r0, r1
   d5e76:	4611      	mov	r1, r2
   d5e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5e7c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5e80:	4a04      	ldr	r2, [pc, #16]	; (d5e94 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5e82:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5e84:	2201      	movs	r2, #1
  _serial = serial;
   d5e86:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5e88:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5e8a:	461a      	mov	r2, r3
   d5e8c:	f7fe fac6 	bl	d441c <hal_usart_init>
}
   d5e90:	4620      	mov	r0, r4
   d5e92:	bd10      	pop	{r4, pc}
   d5e94:	000d6ac0 	.word	0x000d6ac0

000d5e98 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d5e98:	7c00      	ldrb	r0, [r0, #16]
   d5e9a:	2300      	movs	r3, #0
   d5e9c:	f7fe bb06 	b.w	d44ac <hal_usart_begin_config>

000d5ea0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d5ea0:	2200      	movs	r2, #0
   d5ea2:	f7ff bff9 	b.w	d5e98 <_ZN11USARTSerial5beginEmm>

000d5ea6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d5ea6:	7c00      	ldrb	r0, [r0, #16]
   d5ea8:	f7fe bac0 	b.w	d442c <hal_usart_end>

000d5eac <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5eac:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5eae:	4c0e      	ldr	r4, [pc, #56]	; (d5ee8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5eb0:	7821      	ldrb	r1, [r4, #0]
   d5eb2:	f3bf 8f5b 	dmb	ish
   d5eb6:	f011 0101 	ands.w	r1, r1, #1
   d5eba:	d112      	bne.n	d5ee2 <_Z22__fetch_global_Serial1v+0x36>
   d5ebc:	4620      	mov	r0, r4
   d5ebe:	9101      	str	r1, [sp, #4]
   d5ec0:	f7fe f8f8 	bl	d40b4 <__cxa_guard_acquire>
   d5ec4:	9901      	ldr	r1, [sp, #4]
   d5ec6:	b160      	cbz	r0, d5ee2 <_Z22__fetch_global_Serial1v+0x36>
   d5ec8:	4a08      	ldr	r2, [pc, #32]	; (d5eec <_Z22__fetch_global_Serial1v+0x40>)
   d5eca:	4b09      	ldr	r3, [pc, #36]	; (d5ef0 <_Z22__fetch_global_Serial1v+0x44>)
   d5ecc:	4809      	ldr	r0, [pc, #36]	; (d5ef4 <_Z22__fetch_global_Serial1v+0x48>)
   d5ece:	f7ff ffcd 	bl	d5e6c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5ed2:	4620      	mov	r0, r4
   d5ed4:	f7fe f8f3 	bl	d40be <__cxa_guard_release>
   d5ed8:	4a07      	ldr	r2, [pc, #28]	; (d5ef8 <_Z22__fetch_global_Serial1v+0x4c>)
   d5eda:	4908      	ldr	r1, [pc, #32]	; (d5efc <_Z22__fetch_global_Serial1v+0x50>)
   d5edc:	4805      	ldr	r0, [pc, #20]	; (d5ef4 <_Z22__fetch_global_Serial1v+0x48>)
   d5ede:	f000 fbb1 	bl	d6644 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5ee2:	4804      	ldr	r0, [pc, #16]	; (d5ef4 <_Z22__fetch_global_Serial1v+0x48>)
   d5ee4:	b002      	add	sp, #8
   d5ee6:	bd10      	pop	{r4, pc}
   d5ee8:	2003e698 	.word	0x2003e698
   d5eec:	2003e69c 	.word	0x2003e69c
   d5ef0:	2003e720 	.word	0x2003e720
   d5ef4:	2003e7a4 	.word	0x2003e7a4
   d5ef8:	2003e5e4 	.word	0x2003e5e4
   d5efc:	000d5df1 	.word	0x000d5df1

000d5f00 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5f00:	4770      	bx	lr

000d5f02 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f04:	4606      	mov	r6, r0
   d5f06:	4615      	mov	r5, r2
   d5f08:	460c      	mov	r4, r1
   d5f0a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5f0c:	42bc      	cmp	r4, r7
   d5f0e:	d006      	beq.n	d5f1e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5f10:	6833      	ldr	r3, [r6, #0]
   d5f12:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5f16:	689b      	ldr	r3, [r3, #8]
   d5f18:	4630      	mov	r0, r6
   d5f1a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5f1c:	e7f6      	b.n	d5f0c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5f1e:	4628      	mov	r0, r5
   d5f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f22 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5f22:	7c00      	ldrb	r0, [r0, #16]
   d5f24:	2200      	movs	r2, #0
   d5f26:	f7fe bac9 	b.w	d44bc <hal_i2c_write>

000d5f2a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5f2a:	7c00      	ldrb	r0, [r0, #16]
   d5f2c:	2100      	movs	r1, #0
   d5f2e:	f7fe bacd 	b.w	d44cc <hal_i2c_available>

000d5f32 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5f32:	7c00      	ldrb	r0, [r0, #16]
   d5f34:	2100      	movs	r1, #0
   d5f36:	f7fe bad1 	b.w	d44dc <hal_i2c_read>

000d5f3a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5f3a:	7c00      	ldrb	r0, [r0, #16]
   d5f3c:	2100      	movs	r1, #0
   d5f3e:	f7fe bad5 	b.w	d44ec <hal_i2c_peek>

000d5f42 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5f42:	7c00      	ldrb	r0, [r0, #16]
   d5f44:	2100      	movs	r1, #0
   d5f46:	f7fe bad9 	b.w	d44fc <hal_i2c_flush>

000d5f4a <_ZN7TwoWireD0Ev>:
   d5f4a:	b510      	push	{r4, lr}
   d5f4c:	2114      	movs	r1, #20
   d5f4e:	4604      	mov	r4, r0
   d5f50:	f000 fb7d 	bl	d664e <_ZdlPvj>
   d5f54:	4620      	mov	r0, r4
   d5f56:	bd10      	pop	{r4, pc}

000d5f58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5f58:	b510      	push	{r4, lr}
   d5f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f5e:	4604      	mov	r4, r0
   d5f60:	4608      	mov	r0, r1
   d5f62:	2100      	movs	r1, #0
   d5f64:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5f68:	4b03      	ldr	r3, [pc, #12]	; (d5f78 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5f6a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5f6c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5f6e:	4611      	mov	r1, r2
   d5f70:	f7fe fad4 	bl	d451c <hal_i2c_init>
}
   d5f74:	4620      	mov	r0, r4
   d5f76:	bd10      	pop	{r4, pc}
   d5f78:	000d6af0 	.word	0x000d6af0

000d5f7c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5f7c:	2200      	movs	r2, #0
   d5f7e:	6840      	ldr	r0, [r0, #4]
   d5f80:	4611      	mov	r1, r2
   d5f82:	f7fe bb7f 	b.w	d4684 <network_ready>

000d5f86 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f86:	2200      	movs	r2, #0
   d5f88:	6840      	ldr	r0, [r0, #4]
   d5f8a:	4611      	mov	r1, r2
   d5f8c:	f7fe bb9a 	b.w	d46c4 <network_listening>

000d5f90 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5f90:	2200      	movs	r2, #0
   d5f92:	6840      	ldr	r0, [r0, #4]
   d5f94:	4611      	mov	r1, r2
   d5f96:	f7fe bba5 	b.w	d46e4 <network_get_listen_timeout>

000d5f9a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5f9a:	6840      	ldr	r0, [r0, #4]
   d5f9c:	2200      	movs	r2, #0
   d5f9e:	f7fe bb99 	b.w	d46d4 <network_set_listen_timeout>

000d5fa2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5fa2:	6840      	ldr	r0, [r0, #4]
   d5fa4:	2200      	movs	r2, #0
   d5fa6:	f081 0101 	eor.w	r1, r1, #1
   d5faa:	f7fe bb83 	b.w	d46b4 <network_listen>

000d5fae <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5fae:	2300      	movs	r3, #0
   d5fb0:	6840      	ldr	r0, [r0, #4]
   d5fb2:	461a      	mov	r2, r3
   d5fb4:	4619      	mov	r1, r3
   d5fb6:	f7fe bb75 	b.w	d46a4 <network_off>

000d5fba <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5fba:	2300      	movs	r3, #0
   d5fbc:	6840      	ldr	r0, [r0, #4]
   d5fbe:	461a      	mov	r2, r3
   d5fc0:	4619      	mov	r1, r3
   d5fc2:	f7fe bb67 	b.w	d4694 <network_on>

000d5fc6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5fc6:	2200      	movs	r2, #0
   d5fc8:	6840      	ldr	r0, [r0, #4]
   d5fca:	4611      	mov	r1, r2
   d5fcc:	f7fe bb4a 	b.w	d4664 <network_connecting>

000d5fd0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5fd0:	6840      	ldr	r0, [r0, #4]
   d5fd2:	2200      	movs	r2, #0
   d5fd4:	2102      	movs	r1, #2
   d5fd6:	f7fe bb4d 	b.w	d4674 <network_disconnect>

000d5fda <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5fda:	2300      	movs	r3, #0
   d5fdc:	6840      	ldr	r0, [r0, #4]
   d5fde:	461a      	mov	r2, r3
   d5fe0:	f7fe bb38 	b.w	d4654 <network_connect>

000d5fe4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5fe4:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5fe6:	2204      	movs	r2, #4
   d5fe8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5fea:	4a02      	ldr	r2, [pc, #8]	; (d5ff4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5fec:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5fee:	4770      	bx	lr
   d5ff0:	2003e7b8 	.word	0x2003e7b8
   d5ff4:	000d6b18 	.word	0x000d6b18

000d5ff8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5ff8:	2300      	movs	r3, #0
   d5ffa:	6840      	ldr	r0, [r0, #4]
   d5ffc:	461a      	mov	r2, r3
   d5ffe:	f7fe bb29 	b.w	d4654 <network_connect>

000d6002 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6002:	6840      	ldr	r0, [r0, #4]
   d6004:	2200      	movs	r2, #0
   d6006:	2102      	movs	r1, #2
   d6008:	f7fe bb34 	b.w	d4674 <network_disconnect>

000d600c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d600c:	2200      	movs	r2, #0
   d600e:	6840      	ldr	r0, [r0, #4]
   d6010:	4611      	mov	r1, r2
   d6012:	f7fe bb27 	b.w	d4664 <network_connecting>

000d6016 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6016:	2200      	movs	r2, #0
   d6018:	6840      	ldr	r0, [r0, #4]
   d601a:	4611      	mov	r1, r2
   d601c:	f7fe bb32 	b.w	d4684 <network_ready>

000d6020 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6020:	2300      	movs	r3, #0
   d6022:	6840      	ldr	r0, [r0, #4]
   d6024:	461a      	mov	r2, r3
   d6026:	4619      	mov	r1, r3
   d6028:	f7fe bb34 	b.w	d4694 <network_on>

000d602c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d602c:	2300      	movs	r3, #0
   d602e:	6840      	ldr	r0, [r0, #4]
   d6030:	461a      	mov	r2, r3
   d6032:	4619      	mov	r1, r3
   d6034:	f7fe bb36 	b.w	d46a4 <network_off>

000d6038 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6038:	6840      	ldr	r0, [r0, #4]
   d603a:	2200      	movs	r2, #0
   d603c:	f081 0101 	eor.w	r1, r1, #1
   d6040:	f7fe bb38 	b.w	d46b4 <network_listen>

000d6044 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6044:	6840      	ldr	r0, [r0, #4]
   d6046:	2200      	movs	r2, #0
   d6048:	f7fe bb44 	b.w	d46d4 <network_set_listen_timeout>

000d604c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d604c:	2200      	movs	r2, #0
   d604e:	6840      	ldr	r0, [r0, #4]
   d6050:	4611      	mov	r1, r2
   d6052:	f7fe bb47 	b.w	d46e4 <network_get_listen_timeout>

000d6056 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6056:	2200      	movs	r2, #0
   d6058:	6840      	ldr	r0, [r0, #4]
   d605a:	4611      	mov	r1, r2
   d605c:	f7fe bb32 	b.w	d46c4 <network_listening>

000d6060 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6064:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6066:	b095      	sub	sp, #84	; 0x54
   d6068:	4616      	mov	r6, r2
   d606a:	460d      	mov	r5, r1
   d606c:	4607      	mov	r7, r0
    IPAddress addr;
   d606e:	f7ff fdfd 	bl	d5c6c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6072:	4621      	mov	r1, r4
   d6074:	2218      	movs	r2, #24
   d6076:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6078:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d607a:	f000 fb25 	bl	d66c8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d607e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6080:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6084:	4621      	mov	r1, r4
   d6086:	466b      	mov	r3, sp
   d6088:	aa0c      	add	r2, sp, #48	; 0x30
   d608a:	4630      	mov	r0, r6
   d608c:	f7fe f96e 	bl	d436c <netdb_getaddrinfo>
    if (!r) {
   d6090:	4604      	mov	r4, r0
   d6092:	2800      	cmp	r0, #0
   d6094:	d146      	bne.n	d6124 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6096:	4602      	mov	r2, r0
   d6098:	2101      	movs	r1, #1
   d609a:	6868      	ldr	r0, [r5, #4]
   d609c:	f7fe faf2 	bl	d4684 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d60a0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d60a2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d60a4:	4622      	mov	r2, r4
   d60a6:	6868      	ldr	r0, [r5, #4]
   d60a8:	f7fe faec 	bl	d4684 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60ac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d60ae:	4681      	mov	r9, r0
        bool ok = false;
   d60b0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60b2:	2e00      	cmp	r6, #0
   d60b4:	d036      	beq.n	d6124 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d60b6:	2900      	cmp	r1, #0
   d60b8:	d134      	bne.n	d6124 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d60ba:	6873      	ldr	r3, [r6, #4]
   d60bc:	2b02      	cmp	r3, #2
   d60be:	d003      	beq.n	d60c8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d60c0:	2b0a      	cmp	r3, #10
   d60c2:	d00b      	beq.n	d60dc <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60c4:	69f6      	ldr	r6, [r6, #28]
   d60c6:	e7f4      	b.n	d60b2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d60c8:	f1b8 0f00 	cmp.w	r8, #0
   d60cc:	d004      	beq.n	d60d8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d60ce:	6971      	ldr	r1, [r6, #20]
   d60d0:	4638      	mov	r0, r7
   d60d2:	3104      	adds	r1, #4
   d60d4:	f7ff fdf7 	bl	d5cc6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d60d8:	4641      	mov	r1, r8
   d60da:	e7f3      	b.n	d60c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d60dc:	f1b9 0f00 	cmp.w	r9, #0
   d60e0:	d101      	bne.n	d60e6 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d60e2:	4649      	mov	r1, r9
   d60e4:	e7ee      	b.n	d60c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d60e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d60e8:	2210      	movs	r2, #16
   d60ea:	a801      	add	r0, sp, #4
   d60ec:	f000 faec 	bl	d66c8 <memset>
                    a.v = 6;
   d60f0:	2306      	movs	r3, #6
   d60f2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d60f6:	ad01      	add	r5, sp, #4
   d60f8:	f104 0308 	add.w	r3, r4, #8
   d60fc:	3418      	adds	r4, #24
   d60fe:	6818      	ldr	r0, [r3, #0]
   d6100:	6859      	ldr	r1, [r3, #4]
   d6102:	462a      	mov	r2, r5
   d6104:	c203      	stmia	r2!, {r0, r1}
   d6106:	3308      	adds	r3, #8
   d6108:	42a3      	cmp	r3, r4
   d610a:	4615      	mov	r5, r2
   d610c:	d1f7      	bne.n	d60fe <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d610e:	a901      	add	r1, sp, #4
   d6110:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6112:	ad07      	add	r5, sp, #28
   d6114:	f7ff fdb8 	bl	d5c88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d611a:	1d3c      	adds	r4, r7, #4
   d611c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d611e:	682b      	ldr	r3, [r5, #0]
   d6120:	7023      	strb	r3, [r4, #0]
   d6122:	e7de      	b.n	d60e2 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6124:	9800      	ldr	r0, [sp, #0]
   d6126:	f7fe f919 	bl	d435c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d612a:	4638      	mov	r0, r7
   d612c:	b015      	add	sp, #84	; 0x54
   d612e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6134 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6134:	4b02      	ldr	r3, [pc, #8]	; (d6140 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6136:	4a03      	ldr	r2, [pc, #12]	; (d6144 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6138:	601a      	str	r2, [r3, #0]
   d613a:	2200      	movs	r2, #0
   d613c:	605a      	str	r2, [r3, #4]

} // spark
   d613e:	4770      	bx	lr
   d6140:	2003e7c0 	.word	0x2003e7c0
   d6144:	000d6b4c 	.word	0x000d6b4c

000d6148 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6148:	f100 0310 	add.w	r3, r0, #16
   d614c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d614e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d6152:	2901      	cmp	r1, #1
   d6154:	4618      	mov	r0, r3
   d6156:	d108      	bne.n	d616a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6158:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d615c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d6160:	3a01      	subs	r2, #1
   d6162:	f103 0310 	add.w	r3, r3, #16
   d6166:	d1f2      	bne.n	d614e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6168:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d616a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d616c:	bf04      	itt	eq
   d616e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6172:	1852      	addeq	r2, r2, r1
   d6174:	e7f4      	b.n	d6160 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6176 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6176:	b40e      	push	{r1, r2, r3}
   d6178:	b5f0      	push	{r4, r5, r6, r7, lr}
   d617a:	b088      	sub	sp, #32
   d617c:	af00      	add	r7, sp, #0
   d617e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6182:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6184:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6188:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d618a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d618c:	462b      	mov	r3, r5
   d618e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6190:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6192:	f7fe facf 	bl	d4734 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6196:	280f      	cmp	r0, #15
   d6198:	687a      	ldr	r2, [r7, #4]
   d619a:	d91a      	bls.n	d61d2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d619c:	f100 0308 	add.w	r3, r0, #8
   d61a0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d61a4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d61a6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d61aa:	1c41      	adds	r1, r0, #1
   d61ac:	462b      	mov	r3, r5
   d61ae:	4668      	mov	r0, sp
        va_start(args, fmt);
   d61b0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d61b2:	f7fe fabf 	bl	d4734 <vsnprintf>
        if (n > 0) {
   d61b6:	1e02      	subs	r2, r0, #0
   d61b8:	dd04      	ble.n	d61c4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d61ba:	6823      	ldr	r3, [r4, #0]
   d61bc:	4669      	mov	r1, sp
   d61be:	689b      	ldr	r3, [r3, #8]
   d61c0:	4620      	mov	r0, r4
   d61c2:	4798      	blx	r3
   d61c4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d61c6:	3720      	adds	r7, #32
   d61c8:	46bd      	mov	sp, r7
   d61ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d61ce:	b003      	add	sp, #12
   d61d0:	4770      	bx	lr
    } else if (n > 0) {
   d61d2:	2800      	cmp	r0, #0
   d61d4:	d0f7      	beq.n	d61c6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d61d6:	6823      	ldr	r3, [r4, #0]
   d61d8:	4602      	mov	r2, r0
   d61da:	689b      	ldr	r3, [r3, #8]
   d61dc:	f107 0110 	add.w	r1, r7, #16
   d61e0:	4620      	mov	r0, r4
   d61e2:	4798      	blx	r3
}
   d61e4:	e7ef      	b.n	d61c6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d61e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d61e6:	b510      	push	{r4, lr}
          _M_dispose();
   d61e8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d61ea:	4604      	mov	r4, r0
          _M_dispose();
   d61ec:	689b      	ldr	r3, [r3, #8]
   d61ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d61f0:	68a3      	ldr	r3, [r4, #8]
   d61f2:	3b01      	subs	r3, #1
   d61f4:	60a3      	str	r3, [r4, #8]
   d61f6:	b92b      	cbnz	r3, d6204 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d61f8:	6823      	ldr	r3, [r4, #0]
   d61fa:	4620      	mov	r0, r4
   d61fc:	68db      	ldr	r3, [r3, #12]
    }
   d61fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6202:	4718      	bx	r3
    }
   d6204:	bd10      	pop	{r4, pc}

000d6206 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   d6206:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6208:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d620a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d620e:	689b      	ldr	r3, [r3, #8]
   d6210:	2201      	movs	r2, #1
   d6212:	f10d 0107 	add.w	r1, sp, #7
   d6216:	4798      	blx	r3
}
   d6218:	b003      	add	sp, #12
   d621a:	f85d fb04 	ldr.w	pc, [sp], #4

000d621e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d621e:	b538      	push	{r3, r4, r5, lr}
   d6220:	680b      	ldr	r3, [r1, #0]
   d6222:	6003      	str	r3, [r0, #0]
   d6224:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6226:	6843      	ldr	r3, [r0, #4]
   d6228:	429d      	cmp	r5, r3
    class __shared_ptr
   d622a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d622c:	d00c      	beq.n	d6248 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d622e:	b115      	cbz	r5, d6236 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6230:	686b      	ldr	r3, [r5, #4]
   d6232:	3301      	adds	r3, #1
   d6234:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6236:	6860      	ldr	r0, [r4, #4]
   d6238:	b128      	cbz	r0, d6246 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d623a:	6843      	ldr	r3, [r0, #4]
   d623c:	3b01      	subs	r3, #1
   d623e:	6043      	str	r3, [r0, #4]
   d6240:	b90b      	cbnz	r3, d6246 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6242:	f7ff ffd0 	bl	d61e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6246:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6248:	4620      	mov	r0, r4
   d624a:	bd38      	pop	{r3, r4, r5, pc}

000d624c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d624c:	460b      	mov	r3, r1
   d624e:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6250:	2200      	movs	r2, #0
   d6252:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6254:	e9c0 2200 	strd	r2, r2, [r0]
   d6258:	4604      	mov	r4, r0
        t_ = t;
   d625a:	6083      	str	r3, [r0, #8]
    if (t) {
   d625c:	b90b      	cbnz	r3, d6262 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d625e:	4620      	mov	r0, r4
   d6260:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6262:	f7ff ffdc 	bl	d621e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6266:	e7fa      	b.n	d625e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6268 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6268:	6883      	ldr	r3, [r0, #8]
   d626a:	b1eb      	cbz	r3, d62a8 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d626c:	781a      	ldrb	r2, [r3, #0]
   d626e:	2a03      	cmp	r2, #3
   d6270:	d81a      	bhi.n	d62a8 <_ZNK5spark9JSONValue4typeEv+0x40>
   d6272:	e8df f002 	tbb	[pc, r2]
   d6276:	1704      	.short	0x1704
   d6278:	1b02      	.short	0x1b02
   d627a:	2005      	movs	r0, #5
   d627c:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d627e:	6802      	ldr	r2, [r0, #0]
   d6280:	685b      	ldr	r3, [r3, #4]
   d6282:	6852      	ldr	r2, [r2, #4]
   d6284:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6286:	282d      	cmp	r0, #45	; 0x2d
   d6288:	d012      	beq.n	d62b0 <_ZNK5spark9JSONValue4typeEv+0x48>
   d628a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d628e:	2b09      	cmp	r3, #9
   d6290:	d90e      	bls.n	d62b0 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6292:	2874      	cmp	r0, #116	; 0x74
   d6294:	d00e      	beq.n	d62b4 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6296:	2866      	cmp	r0, #102	; 0x66
   d6298:	d00c      	beq.n	d62b4 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d629a:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d629e:	4258      	negs	r0, r3
   d62a0:	4158      	adcs	r0, r3
   d62a2:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d62a4:	2006      	movs	r0, #6
   d62a6:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d62a8:	2000      	movs	r0, #0
   d62aa:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d62ac:	2004      	movs	r0, #4
   d62ae:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d62b0:	2003      	movs	r0, #3
   d62b2:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d62b4:	2002      	movs	r0, #2
}
   d62b6:	4770      	bx	lr

000d62b8 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d62b8:	b510      	push	{r4, lr}
   d62ba:	4604      	mov	r4, r0
    switch (type()) {
   d62bc:	f7ff ffd4 	bl	d6268 <_ZNK5spark9JSONValue4typeEv>
   d62c0:	2802      	cmp	r0, #2
   d62c2:	d00e      	beq.n	d62e2 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d62c4:	1ec3      	subs	r3, r0, #3
   d62c6:	b2db      	uxtb	r3, r3
   d62c8:	2b01      	cmp	r3, #1
   d62ca:	d814      	bhi.n	d62f6 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d62cc:	6822      	ldr	r2, [r4, #0]
   d62ce:	68a3      	ldr	r3, [r4, #8]
   d62d0:	6850      	ldr	r0, [r2, #4]
   d62d2:	685b      	ldr	r3, [r3, #4]
}
   d62d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d62d8:	220a      	movs	r2, #10
   d62da:	2100      	movs	r1, #0
   d62dc:	4418      	add	r0, r3
   d62de:	f000 baf1 	b.w	d68c4 <strtol>
        const char* const s = d_->json + t_->start;
   d62e2:	6822      	ldr	r2, [r4, #0]
   d62e4:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d62e6:	6852      	ldr	r2, [r2, #4]
   d62e8:	685b      	ldr	r3, [r3, #4]
   d62ea:	5cd0      	ldrb	r0, [r2, r3]
   d62ec:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d62f0:	4258      	negs	r0, r3
   d62f2:	4158      	adcs	r0, r3
}
   d62f4:	bd10      	pop	{r4, pc}
    switch (type()) {
   d62f6:	2000      	movs	r0, #0
   d62f8:	e7fc      	b.n	d62f4 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d62fc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d62fc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d62fe:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6300:	e9c0 3300 	strd	r3, r3, [r0]
   d6304:	4604      	mov	r4, r0
        n_(0) {
   d6306:	480e      	ldr	r0, [pc, #56]	; (d6340 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6308:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d630c:	b1a9      	cbz	r1, d633a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d630e:	780b      	ldrb	r3, [r1, #0]
   d6310:	2b03      	cmp	r3, #3
   d6312:	d006      	beq.n	d6322 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6314:	b98b      	cbnz	r3, d633a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6316:	6813      	ldr	r3, [r2, #0]
   d6318:	6858      	ldr	r0, [r3, #4]
   d631a:	684b      	ldr	r3, [r1, #4]
   d631c:	5cc3      	ldrb	r3, [r0, r3]
   d631e:	2b6e      	cmp	r3, #110	; 0x6e
   d6320:	d007      	beq.n	d6332 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d6322:	6813      	ldr	r3, [r2, #0]
   d6324:	684d      	ldr	r5, [r1, #4]
   d6326:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6328:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d632a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d632c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d632e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6330:	60e3      	str	r3, [r4, #12]
   d6332:	4611      	mov	r1, r2
   d6334:	4620      	mov	r0, r4
   d6336:	f7ff ff72 	bl	d621e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d633a:	4620      	mov	r0, r4
   d633c:	bd38      	pop	{r3, r4, r5, pc}
   d633e:	bf00      	nop
   d6340:	000d69c2 	.word	0x000d69c2

000d6344 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6344:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6346:	2500      	movs	r5, #0
   d6348:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d634a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d634e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6352:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6356:	4604      	mov	r4, r0
   d6358:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d635a:	b14b      	cbz	r3, d6370 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d635c:	781a      	ldrb	r2, [r3, #0]
   d635e:	2a01      	cmp	r2, #1
   d6360:	d106      	bne.n	d6370 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6362:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6366:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6368:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d636a:	6143      	str	r3, [r0, #20]
   d636c:	f7ff ff57 	bl	d621e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6370:	4620      	mov	r0, r4
   d6372:	bd38      	pop	{r3, r4, r5, pc}

000d6374 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6374:	b510      	push	{r4, lr}
    if (!n_) {
   d6376:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6378:	4604      	mov	r4, r0
    if (!n_) {
   d637a:	b163      	cbz	r3, d6396 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d637c:	6880      	ldr	r0, [r0, #8]
   d637e:	60e0      	str	r0, [r4, #12]
    --n_;
   d6380:	3b01      	subs	r3, #1
    ++t_;
   d6382:	3010      	adds	r0, #16
   d6384:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6386:	6120      	str	r0, [r4, #16]
    --n_;
   d6388:	6163      	str	r3, [r4, #20]
    if (n_) {
   d638a:	b113      	cbz	r3, d6392 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d638c:	f7ff fedc 	bl	d6148 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6390:	60a0      	str	r0, [r4, #8]
    return true;
   d6392:	2001      	movs	r0, #1
   d6394:	e000      	b.n	d6398 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6396:	4618      	mov	r0, r3
}
   d6398:	bd10      	pop	{r4, pc}

000d639a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d639a:	b510      	push	{r4, lr}
    write('}');
   d639c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d639e:	4604      	mov	r4, r0
    write('}');
   d63a0:	f7ff ff31 	bl	d6206 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d63a4:	2301      	movs	r3, #1
   d63a6:	7123      	strb	r3, [r4, #4]
}
   d63a8:	4620      	mov	r0, r4
   d63aa:	bd10      	pop	{r4, pc}

000d63ac <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d63ac:	b508      	push	{r3, lr}
    switch (state_) {
   d63ae:	7903      	ldrb	r3, [r0, #4]
   d63b0:	2b01      	cmp	r3, #1
   d63b2:	d002      	beq.n	d63ba <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d63b4:	2b02      	cmp	r3, #2
   d63b6:	d004      	beq.n	d63c2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d63b8:	bd08      	pop	{r3, pc}
        write(',');
   d63ba:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d63bc:	f7ff ff23 	bl	d6206 <_ZN5spark10JSONWriter5writeEc>
}
   d63c0:	e7fa      	b.n	d63b8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d63c2:	213a      	movs	r1, #58	; 0x3a
   d63c4:	e7fa      	b.n	d63bc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d63c6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d63c6:	b510      	push	{r4, lr}
   d63c8:	4604      	mov	r4, r0
    writeSeparator();
   d63ca:	f7ff ffef 	bl	d63ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d63ce:	4620      	mov	r0, r4
   d63d0:	217b      	movs	r1, #123	; 0x7b
   d63d2:	f7ff ff18 	bl	d6206 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d63d6:	2300      	movs	r3, #0
   d63d8:	7123      	strb	r3, [r4, #4]
}
   d63da:	4620      	mov	r0, r4
   d63dc:	bd10      	pop	{r4, pc}
	...

000d63e0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d63e0:	b513      	push	{r0, r1, r4, lr}
   d63e2:	4604      	mov	r4, r0
   d63e4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d63e6:	f7ff ffe1 	bl	d63ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d63ea:	6823      	ldr	r3, [r4, #0]
   d63ec:	9a01      	ldr	r2, [sp, #4]
   d63ee:	68db      	ldr	r3, [r3, #12]
   d63f0:	4903      	ldr	r1, [pc, #12]	; (d6400 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d63f2:	4620      	mov	r0, r4
   d63f4:	4798      	blx	r3
    state_ = NEXT;
   d63f6:	2301      	movs	r3, #1
}
   d63f8:	4620      	mov	r0, r4
    state_ = NEXT;
   d63fa:	7123      	strb	r3, [r4, #4]
}
   d63fc:	b002      	add	sp, #8
   d63fe:	bd10      	pop	{r4, pc}
   d6400:	000d699f 	.word	0x000d699f

000d6404 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6404:	b513      	push	{r0, r1, r4, lr}
   d6406:	4604      	mov	r4, r0
   d6408:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d640a:	f7ff ffcf 	bl	d63ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d640e:	6823      	ldr	r3, [r4, #0]
   d6410:	9a01      	ldr	r2, [sp, #4]
   d6412:	68db      	ldr	r3, [r3, #12]
   d6414:	4903      	ldr	r1, [pc, #12]	; (d6424 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6416:	4620      	mov	r0, r4
   d6418:	4798      	blx	r3
    state_ = NEXT;
   d641a:	2301      	movs	r3, #1
}
   d641c:	4620      	mov	r0, r4
    state_ = NEXT;
   d641e:	7123      	strb	r3, [r4, #4]
}
   d6420:	b002      	add	sp, #8
   d6422:	bd10      	pop	{r4, pc}
   d6424:	000d6b78 	.word	0x000d6b78

000d6428 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d642c:	460d      	mov	r5, r1
   d642e:	4617      	mov	r7, r2
    write('"');
   d6430:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6432:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d64d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6436:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6438:	442f      	add	r7, r5
    write('"');
   d643a:	f7ff fee4 	bl	d6206 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d643e:	4629      	mov	r1, r5
    while (s != end) {
   d6440:	42bd      	cmp	r5, r7
   d6442:	462a      	mov	r2, r5
   d6444:	d038      	beq.n	d64b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6446:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d644a:	2e22      	cmp	r6, #34	; 0x22
   d644c:	d003      	beq.n	d6456 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d644e:	2e5c      	cmp	r6, #92	; 0x5c
   d6450:	d001      	beq.n	d6456 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6452:	2e1f      	cmp	r6, #31
   d6454:	d8f4      	bhi.n	d6440 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6456:	6823      	ldr	r3, [r4, #0]
   d6458:	1a52      	subs	r2, r2, r1
   d645a:	689b      	ldr	r3, [r3, #8]
   d645c:	4620      	mov	r0, r4
   d645e:	4798      	blx	r3
            write('\\');
   d6460:	215c      	movs	r1, #92	; 0x5c
   d6462:	4620      	mov	r0, r4
   d6464:	f7ff fecf 	bl	d6206 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6468:	2e0d      	cmp	r6, #13
   d646a:	d80a      	bhi.n	d6482 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d646c:	2e07      	cmp	r6, #7
   d646e:	d91c      	bls.n	d64aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6470:	f1a6 0308 	sub.w	r3, r6, #8
   d6474:	2b05      	cmp	r3, #5
   d6476:	d818      	bhi.n	d64aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6478:	e8df f003 	tbb	[pc, r3]
   d647c:	17110f0d 	.word	0x17110f0d
   d6480:	1513      	.short	0x1513
   d6482:	2e22      	cmp	r6, #34	; 0x22
   d6484:	d001      	beq.n	d648a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6486:	2e5c      	cmp	r6, #92	; 0x5c
   d6488:	d10f      	bne.n	d64aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d648a:	4631      	mov	r1, r6
                write('b');
   d648c:	4620      	mov	r0, r4
   d648e:	f7ff feba 	bl	d6206 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d6492:	4629      	mov	r1, r5
    while (s != end) {
   d6494:	e7d4      	b.n	d6440 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6496:	2162      	movs	r1, #98	; 0x62
   d6498:	e7f8      	b.n	d648c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d649a:	2174      	movs	r1, #116	; 0x74
   d649c:	e7f6      	b.n	d648c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d649e:	216e      	movs	r1, #110	; 0x6e
   d64a0:	e7f4      	b.n	d648c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d64a2:	2166      	movs	r1, #102	; 0x66
   d64a4:	e7f2      	b.n	d648c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d64a6:	2172      	movs	r1, #114	; 0x72
   d64a8:	e7f0      	b.n	d648c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d64aa:	6823      	ldr	r3, [r4, #0]
   d64ac:	4632      	mov	r2, r6
   d64ae:	68db      	ldr	r3, [r3, #12]
   d64b0:	4641      	mov	r1, r8
   d64b2:	4620      	mov	r0, r4
   d64b4:	4798      	blx	r3
                break;
   d64b6:	e7ec      	b.n	d6492 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d64b8:	428d      	cmp	r5, r1
   d64ba:	d004      	beq.n	d64c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d64bc:	6823      	ldr	r3, [r4, #0]
   d64be:	1a6a      	subs	r2, r5, r1
   d64c0:	689b      	ldr	r3, [r3, #8]
   d64c2:	4620      	mov	r0, r4
   d64c4:	4798      	blx	r3
    }
    write('"');
   d64c6:	2122      	movs	r1, #34	; 0x22
   d64c8:	4620      	mov	r0, r4
   d64ca:	f7ff fe9c 	bl	d6206 <_ZN5spark10JSONWriter5writeEc>
}
   d64ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d64d2:	bf00      	nop
   d64d4:	000d6b7b 	.word	0x000d6b7b

000d64d8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d64d8:	b513      	push	{r0, r1, r4, lr}
   d64da:	4604      	mov	r4, r0
   d64dc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d64e0:	f7ff ff64 	bl	d63ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d64e4:	4620      	mov	r0, r4
   d64e6:	e9dd 2100 	ldrd	r2, r1, [sp]
   d64ea:	f7ff ff9d 	bl	d6428 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d64ee:	2302      	movs	r3, #2
}
   d64f0:	4620      	mov	r0, r4
    state_ = VALUE;
   d64f2:	7123      	strb	r3, [r4, #4]
}
   d64f4:	b002      	add	sp, #8
   d64f6:	bd10      	pop	{r4, pc}

000d64f8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d64f8:	b513      	push	{r0, r1, r4, lr}
   d64fa:	4604      	mov	r4, r0
   d64fc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6500:	f7ff ff54 	bl	d63ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d6504:	4620      	mov	r0, r4
   d6506:	e9dd 2100 	ldrd	r2, r1, [sp]
   d650a:	f7ff ff8d 	bl	d6428 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d650e:	2301      	movs	r3, #1
}
   d6510:	4620      	mov	r0, r4
    state_ = NEXT;
   d6512:	7123      	strb	r3, [r4, #4]
}
   d6514:	b002      	add	sp, #8
   d6516:	bd10      	pop	{r4, pc}

000d6518 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6518:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d651a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d651c:	d902      	bls.n	d6524 <pinAvailable+0xc>
    return false;
   d651e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6520:	b002      	add	sp, #8
   d6522:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6524:	f1a0 030b 	sub.w	r3, r0, #11
   d6528:	2b02      	cmp	r3, #2
   d652a:	d81a      	bhi.n	d6562 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d652c:	4c17      	ldr	r4, [pc, #92]	; (d658c <pinAvailable+0x74>)
   d652e:	7821      	ldrb	r1, [r4, #0]
   d6530:	f3bf 8f5b 	dmb	ish
   d6534:	f011 0101 	ands.w	r1, r1, #1
   d6538:	d10b      	bne.n	d6552 <pinAvailable+0x3a>
   d653a:	4620      	mov	r0, r4
   d653c:	9101      	str	r1, [sp, #4]
   d653e:	f7fd fdb9 	bl	d40b4 <__cxa_guard_acquire>
   d6542:	9901      	ldr	r1, [sp, #4]
   d6544:	b128      	cbz	r0, d6552 <pinAvailable+0x3a>
   d6546:	4812      	ldr	r0, [pc, #72]	; (d6590 <pinAvailable+0x78>)
   d6548:	f7fe f942 	bl	d47d0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d654c:	4620      	mov	r0, r4
   d654e:	f7fd fdb6 	bl	d40be <__cxa_guard_release>
   d6552:	4b0f      	ldr	r3, [pc, #60]	; (d6590 <pinAvailable+0x78>)
   d6554:	7818      	ldrb	r0, [r3, #0]
   d6556:	f7fd fff1 	bl	d453c <hal_spi_is_enabled>
   d655a:	2800      	cmp	r0, #0
   d655c:	d1df      	bne.n	d651e <pinAvailable+0x6>
  return true; // 'pin' is available
   d655e:	2001      	movs	r0, #1
   d6560:	e7de      	b.n	d6520 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6562:	2801      	cmp	r0, #1
   d6564:	d809      	bhi.n	d657a <pinAvailable+0x62>
   d6566:	f000 f845 	bl	d65f4 <_Z19__fetch_global_Wirev>
   d656a:	2100      	movs	r1, #0
   d656c:	7c00      	ldrb	r0, [r0, #16]
   d656e:	f7fd ffcd 	bl	d450c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6572:	f080 0001 	eor.w	r0, r0, #1
   d6576:	b2c0      	uxtb	r0, r0
   d6578:	e7d2      	b.n	d6520 <pinAvailable+0x8>
   d657a:	3809      	subs	r0, #9
   d657c:	2801      	cmp	r0, #1
   d657e:	d8ee      	bhi.n	d655e <pinAvailable+0x46>
   d6580:	f7ff fc94 	bl	d5eac <_Z22__fetch_global_Serial1v>
   d6584:	7c00      	ldrb	r0, [r0, #16]
   d6586:	f7fd ff81 	bl	d448c <hal_usart_is_enabled>
   d658a:	e7f2      	b.n	d6572 <pinAvailable+0x5a>
   d658c:	2003e7c8 	.word	0x2003e7c8
   d6590:	2003e7cc 	.word	0x2003e7cc

000d6594 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6594:	280d      	cmp	r0, #13
{
   d6596:	b510      	push	{r4, lr}
   d6598:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d659a:	bf9c      	itt	ls
   d659c:	340e      	addls	r4, #14
   d659e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d65a0:	4620      	mov	r0, r4
   d65a2:	f7ff ffb9 	bl	d6518 <pinAvailable>
   d65a6:	b150      	cbz	r0, d65be <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d65a8:	2103      	movs	r1, #3
   d65aa:	4620      	mov	r0, r4
   d65ac:	f7fd fee6 	bl	d437c <HAL_Validate_Pin_Function>
   d65b0:	2803      	cmp	r0, #3
   d65b2:	d104      	bne.n	d65be <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d65b4:	4620      	mov	r0, r4
}
   d65b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d65ba:	f7fd bee7 	b.w	d438c <hal_adc_read>
}
   d65be:	2000      	movs	r0, #0
   d65c0:	bd10      	pop	{r4, pc}
	...

000d65c4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d65c4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d65c6:	2300      	movs	r3, #0
   d65c8:	2520      	movs	r5, #32
   d65ca:	8043      	strh	r3, [r0, #2]
   d65cc:	2314      	movs	r3, #20
{
   d65ce:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d65d0:	8003      	strh	r3, [r0, #0]
   d65d2:	6085      	str	r5, [r0, #8]
   d65d4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d65d6:	4906      	ldr	r1, [pc, #24]	; (d65f0 <_Z17acquireWireBufferv+0x2c>)
   d65d8:	4628      	mov	r0, r5
   d65da:	f000 f83c 	bl	d6656 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d65de:	4904      	ldr	r1, [pc, #16]	; (d65f0 <_Z17acquireWireBufferv+0x2c>)
	};
   d65e0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d65e2:	4628      	mov	r0, r5
   d65e4:	f000 f837 	bl	d6656 <_ZnajRKSt9nothrow_t>
	};
   d65e8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d65ea:	4620      	mov	r0, r4
   d65ec:	bd38      	pop	{r3, r4, r5, pc}
   d65ee:	bf00      	nop
   d65f0:	000d6b81 	.word	0x000d6b81

000d65f4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d65f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d65f6:	4d0f      	ldr	r5, [pc, #60]	; (d6634 <_Z19__fetch_global_Wirev+0x40>)
   d65f8:	7829      	ldrb	r1, [r5, #0]
   d65fa:	f3bf 8f5b 	dmb	ish
   d65fe:	f011 0401 	ands.w	r4, r1, #1
{
   d6602:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6604:	d113      	bne.n	d662e <_Z19__fetch_global_Wirev+0x3a>
   d6606:	4628      	mov	r0, r5
   d6608:	f7fd fd54 	bl	d40b4 <__cxa_guard_acquire>
   d660c:	b178      	cbz	r0, d662e <_Z19__fetch_global_Wirev+0x3a>
   d660e:	a801      	add	r0, sp, #4
   d6610:	f7ff ffd8 	bl	d65c4 <_Z17acquireWireBufferv>
   d6614:	aa01      	add	r2, sp, #4
   d6616:	4621      	mov	r1, r4
   d6618:	4807      	ldr	r0, [pc, #28]	; (d6638 <_Z19__fetch_global_Wirev+0x44>)
   d661a:	f7ff fc9d 	bl	d5f58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d661e:	4628      	mov	r0, r5
   d6620:	f7fd fd4d 	bl	d40be <__cxa_guard_release>
   d6624:	4a05      	ldr	r2, [pc, #20]	; (d663c <_Z19__fetch_global_Wirev+0x48>)
   d6626:	4906      	ldr	r1, [pc, #24]	; (d6640 <_Z19__fetch_global_Wirev+0x4c>)
   d6628:	4803      	ldr	r0, [pc, #12]	; (d6638 <_Z19__fetch_global_Wirev+0x44>)
   d662a:	f000 f80b 	bl	d6644 <__aeabi_atexit>
	return wire;
}
   d662e:	4802      	ldr	r0, [pc, #8]	; (d6638 <_Z19__fetch_global_Wirev+0x44>)
   d6630:	b007      	add	sp, #28
   d6632:	bd30      	pop	{r4, r5, pc}
   d6634:	2003e7d8 	.word	0x2003e7d8
   d6638:	2003e7dc 	.word	0x2003e7dc
   d663c:	2003e5e4 	.word	0x2003e5e4
   d6640:	000d5f01 	.word	0x000d5f01

000d6644 <__aeabi_atexit>:
   d6644:	460b      	mov	r3, r1
   d6646:	4601      	mov	r1, r0
   d6648:	4618      	mov	r0, r3
   d664a:	f000 b807 	b.w	d665c <__cxa_atexit>

000d664e <_ZdlPvj>:
   d664e:	f7fd bd24 	b.w	d409a <_ZdlPv>

000d6652 <_ZnwjRKSt9nothrow_t>:
   d6652:	f7fd bd1e 	b.w	d4092 <_Znwj>

000d6656 <_ZnajRKSt9nothrow_t>:
   d6656:	f7fd bd1e 	b.w	d4096 <_Znaj>
	...

000d665c <__cxa_atexit>:
   d665c:	b510      	push	{r4, lr}
   d665e:	4c05      	ldr	r4, [pc, #20]	; (d6674 <__cxa_atexit+0x18>)
   d6660:	4613      	mov	r3, r2
   d6662:	b12c      	cbz	r4, d6670 <__cxa_atexit+0x14>
   d6664:	460a      	mov	r2, r1
   d6666:	4601      	mov	r1, r0
   d6668:	2002      	movs	r0, #2
   d666a:	f3af 8000 	nop.w
   d666e:	bd10      	pop	{r4, pc}
   d6670:	4620      	mov	r0, r4
   d6672:	e7fc      	b.n	d666e <__cxa_atexit+0x12>
   d6674:	00000000 	.word	0x00000000

000d6678 <memcpy>:
   d6678:	440a      	add	r2, r1
   d667a:	4291      	cmp	r1, r2
   d667c:	f100 33ff 	add.w	r3, r0, #4294967295
   d6680:	d100      	bne.n	d6684 <memcpy+0xc>
   d6682:	4770      	bx	lr
   d6684:	b510      	push	{r4, lr}
   d6686:	f811 4b01 	ldrb.w	r4, [r1], #1
   d668a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d668e:	4291      	cmp	r1, r2
   d6690:	d1f9      	bne.n	d6686 <memcpy+0xe>
   d6692:	bd10      	pop	{r4, pc}

000d6694 <memmove>:
   d6694:	4288      	cmp	r0, r1
   d6696:	b510      	push	{r4, lr}
   d6698:	eb01 0402 	add.w	r4, r1, r2
   d669c:	d902      	bls.n	d66a4 <memmove+0x10>
   d669e:	4284      	cmp	r4, r0
   d66a0:	4623      	mov	r3, r4
   d66a2:	d807      	bhi.n	d66b4 <memmove+0x20>
   d66a4:	1e43      	subs	r3, r0, #1
   d66a6:	42a1      	cmp	r1, r4
   d66a8:	d008      	beq.n	d66bc <memmove+0x28>
   d66aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   d66ae:	f803 2f01 	strb.w	r2, [r3, #1]!
   d66b2:	e7f8      	b.n	d66a6 <memmove+0x12>
   d66b4:	4402      	add	r2, r0
   d66b6:	4601      	mov	r1, r0
   d66b8:	428a      	cmp	r2, r1
   d66ba:	d100      	bne.n	d66be <memmove+0x2a>
   d66bc:	bd10      	pop	{r4, pc}
   d66be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d66c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d66c6:	e7f7      	b.n	d66b8 <memmove+0x24>

000d66c8 <memset>:
   d66c8:	4402      	add	r2, r0
   d66ca:	4603      	mov	r3, r0
   d66cc:	4293      	cmp	r3, r2
   d66ce:	d100      	bne.n	d66d2 <memset+0xa>
   d66d0:	4770      	bx	lr
   d66d2:	f803 1b01 	strb.w	r1, [r3], #1
   d66d6:	e7f9      	b.n	d66cc <memset+0x4>

000d66d8 <srand>:
   d66d8:	b538      	push	{r3, r4, r5, lr}
   d66da:	4b0d      	ldr	r3, [pc, #52]	; (d6710 <srand+0x38>)
   d66dc:	681d      	ldr	r5, [r3, #0]
   d66de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d66e0:	4604      	mov	r4, r0
   d66e2:	b97b      	cbnz	r3, d6704 <srand+0x2c>
   d66e4:	2018      	movs	r0, #24
   d66e6:	f7fe f80d 	bl	d4704 <malloc>
   d66ea:	4a0a      	ldr	r2, [pc, #40]	; (d6714 <srand+0x3c>)
   d66ec:	4b0a      	ldr	r3, [pc, #40]	; (d6718 <srand+0x40>)
   d66ee:	63a8      	str	r0, [r5, #56]	; 0x38
   d66f0:	e9c0 2300 	strd	r2, r3, [r0]
   d66f4:	4b09      	ldr	r3, [pc, #36]	; (d671c <srand+0x44>)
   d66f6:	6083      	str	r3, [r0, #8]
   d66f8:	230b      	movs	r3, #11
   d66fa:	8183      	strh	r3, [r0, #12]
   d66fc:	2201      	movs	r2, #1
   d66fe:	2300      	movs	r3, #0
   d6700:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6704:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6706:	2200      	movs	r2, #0
   d6708:	611c      	str	r4, [r3, #16]
   d670a:	615a      	str	r2, [r3, #20]
   d670c:	bd38      	pop	{r3, r4, r5, pc}
   d670e:	bf00      	nop
   d6710:	2003e580 	.word	0x2003e580
   d6714:	abcd330e 	.word	0xabcd330e
   d6718:	e66d1234 	.word	0xe66d1234
   d671c:	0005deec 	.word	0x0005deec

000d6720 <strchr>:
   d6720:	b2c9      	uxtb	r1, r1
   d6722:	4603      	mov	r3, r0
   d6724:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6728:	b11a      	cbz	r2, d6732 <strchr+0x12>
   d672a:	428a      	cmp	r2, r1
   d672c:	d1f9      	bne.n	d6722 <strchr+0x2>
   d672e:	4618      	mov	r0, r3
   d6730:	4770      	bx	lr
   d6732:	2900      	cmp	r1, #0
   d6734:	bf18      	it	ne
   d6736:	2300      	movne	r3, #0
   d6738:	e7f9      	b.n	d672e <strchr+0xe>

000d673a <strchrnul>:
   d673a:	b510      	push	{r4, lr}
   d673c:	4604      	mov	r4, r0
   d673e:	f7ff ffef 	bl	d6720 <strchr>
   d6742:	b918      	cbnz	r0, d674c <strchrnul+0x12>
   d6744:	4620      	mov	r0, r4
   d6746:	f000 f814 	bl	d6772 <strlen>
   d674a:	4420      	add	r0, r4
   d674c:	bd10      	pop	{r4, pc}

000d674e <strcmp>:
   d674e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6752:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6756:	2a01      	cmp	r2, #1
   d6758:	bf28      	it	cs
   d675a:	429a      	cmpcs	r2, r3
   d675c:	d0f7      	beq.n	d674e <strcmp>
   d675e:	1ad0      	subs	r0, r2, r3
   d6760:	4770      	bx	lr

000d6762 <strcpy>:
   d6762:	4603      	mov	r3, r0
   d6764:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6768:	f803 2b01 	strb.w	r2, [r3], #1
   d676c:	2a00      	cmp	r2, #0
   d676e:	d1f9      	bne.n	d6764 <strcpy+0x2>
   d6770:	4770      	bx	lr

000d6772 <strlen>:
   d6772:	4603      	mov	r3, r0
   d6774:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6778:	2a00      	cmp	r2, #0
   d677a:	d1fb      	bne.n	d6774 <strlen+0x2>
   d677c:	1a18      	subs	r0, r3, r0
   d677e:	3801      	subs	r0, #1
   d6780:	4770      	bx	lr

000d6782 <strncmp>:
   d6782:	b510      	push	{r4, lr}
   d6784:	b16a      	cbz	r2, d67a2 <strncmp+0x20>
   d6786:	3901      	subs	r1, #1
   d6788:	1884      	adds	r4, r0, r2
   d678a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d678e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6792:	4293      	cmp	r3, r2
   d6794:	d103      	bne.n	d679e <strncmp+0x1c>
   d6796:	42a0      	cmp	r0, r4
   d6798:	d001      	beq.n	d679e <strncmp+0x1c>
   d679a:	2b00      	cmp	r3, #0
   d679c:	d1f5      	bne.n	d678a <strncmp+0x8>
   d679e:	1a98      	subs	r0, r3, r2
   d67a0:	bd10      	pop	{r4, pc}
   d67a2:	4610      	mov	r0, r2
   d67a4:	e7fc      	b.n	d67a0 <strncmp+0x1e>

000d67a6 <strrchr>:
   d67a6:	b538      	push	{r3, r4, r5, lr}
   d67a8:	4603      	mov	r3, r0
   d67aa:	460c      	mov	r4, r1
   d67ac:	b969      	cbnz	r1, d67ca <strrchr+0x24>
   d67ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d67b2:	f7ff bfb5 	b.w	d6720 <strchr>
   d67b6:	1c43      	adds	r3, r0, #1
   d67b8:	4605      	mov	r5, r0
   d67ba:	4621      	mov	r1, r4
   d67bc:	4618      	mov	r0, r3
   d67be:	f7ff ffaf 	bl	d6720 <strchr>
   d67c2:	2800      	cmp	r0, #0
   d67c4:	d1f7      	bne.n	d67b6 <strrchr+0x10>
   d67c6:	4628      	mov	r0, r5
   d67c8:	bd38      	pop	{r3, r4, r5, pc}
   d67ca:	2500      	movs	r5, #0
   d67cc:	e7f5      	b.n	d67ba <strrchr+0x14>
	...

000d67d0 <_strtol_l.isra.0>:
   d67d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d67d4:	4e3a      	ldr	r6, [pc, #232]	; (d68c0 <_strtol_l.isra.0+0xf0>)
   d67d6:	4686      	mov	lr, r0
   d67d8:	468c      	mov	ip, r1
   d67da:	4660      	mov	r0, ip
   d67dc:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d67e0:	5da5      	ldrb	r5, [r4, r6]
   d67e2:	f015 0508 	ands.w	r5, r5, #8
   d67e6:	d1f8      	bne.n	d67da <_strtol_l.isra.0+0xa>
   d67e8:	2c2d      	cmp	r4, #45	; 0x2d
   d67ea:	d133      	bne.n	d6854 <_strtol_l.isra.0+0x84>
   d67ec:	f89c 4000 	ldrb.w	r4, [ip]
   d67f0:	f04f 0801 	mov.w	r8, #1
   d67f4:	f100 0c02 	add.w	ip, r0, #2
   d67f8:	2b00      	cmp	r3, #0
   d67fa:	d05c      	beq.n	d68b6 <_strtol_l.isra.0+0xe6>
   d67fc:	2b10      	cmp	r3, #16
   d67fe:	d10c      	bne.n	d681a <_strtol_l.isra.0+0x4a>
   d6800:	2c30      	cmp	r4, #48	; 0x30
   d6802:	d10a      	bne.n	d681a <_strtol_l.isra.0+0x4a>
   d6804:	f89c 0000 	ldrb.w	r0, [ip]
   d6808:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d680c:	2858      	cmp	r0, #88	; 0x58
   d680e:	d14d      	bne.n	d68ac <_strtol_l.isra.0+0xdc>
   d6810:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6814:	2310      	movs	r3, #16
   d6816:	f10c 0c02 	add.w	ip, ip, #2
   d681a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d681e:	3f01      	subs	r7, #1
   d6820:	2600      	movs	r6, #0
   d6822:	fbb7 f9f3 	udiv	r9, r7, r3
   d6826:	4630      	mov	r0, r6
   d6828:	fb03 7a19 	mls	sl, r3, r9, r7
   d682c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d6830:	2d09      	cmp	r5, #9
   d6832:	d818      	bhi.n	d6866 <_strtol_l.isra.0+0x96>
   d6834:	462c      	mov	r4, r5
   d6836:	42a3      	cmp	r3, r4
   d6838:	dd24      	ble.n	d6884 <_strtol_l.isra.0+0xb4>
   d683a:	1c75      	adds	r5, r6, #1
   d683c:	d007      	beq.n	d684e <_strtol_l.isra.0+0x7e>
   d683e:	4581      	cmp	r9, r0
   d6840:	d31d      	bcc.n	d687e <_strtol_l.isra.0+0xae>
   d6842:	d101      	bne.n	d6848 <_strtol_l.isra.0+0x78>
   d6844:	45a2      	cmp	sl, r4
   d6846:	db1a      	blt.n	d687e <_strtol_l.isra.0+0xae>
   d6848:	fb00 4003 	mla	r0, r0, r3, r4
   d684c:	2601      	movs	r6, #1
   d684e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6852:	e7eb      	b.n	d682c <_strtol_l.isra.0+0x5c>
   d6854:	2c2b      	cmp	r4, #43	; 0x2b
   d6856:	bf08      	it	eq
   d6858:	f89c 4000 	ldrbeq.w	r4, [ip]
   d685c:	46a8      	mov	r8, r5
   d685e:	bf08      	it	eq
   d6860:	f100 0c02 	addeq.w	ip, r0, #2
   d6864:	e7c8      	b.n	d67f8 <_strtol_l.isra.0+0x28>
   d6866:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d686a:	2d19      	cmp	r5, #25
   d686c:	d801      	bhi.n	d6872 <_strtol_l.isra.0+0xa2>
   d686e:	3c37      	subs	r4, #55	; 0x37
   d6870:	e7e1      	b.n	d6836 <_strtol_l.isra.0+0x66>
   d6872:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d6876:	2d19      	cmp	r5, #25
   d6878:	d804      	bhi.n	d6884 <_strtol_l.isra.0+0xb4>
   d687a:	3c57      	subs	r4, #87	; 0x57
   d687c:	e7db      	b.n	d6836 <_strtol_l.isra.0+0x66>
   d687e:	f04f 36ff 	mov.w	r6, #4294967295
   d6882:	e7e4      	b.n	d684e <_strtol_l.isra.0+0x7e>
   d6884:	1c73      	adds	r3, r6, #1
   d6886:	d106      	bne.n	d6896 <_strtol_l.isra.0+0xc6>
   d6888:	2322      	movs	r3, #34	; 0x22
   d688a:	f8ce 3000 	str.w	r3, [lr]
   d688e:	4638      	mov	r0, r7
   d6890:	b942      	cbnz	r2, d68a4 <_strtol_l.isra.0+0xd4>
   d6892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6896:	f1b8 0f00 	cmp.w	r8, #0
   d689a:	d000      	beq.n	d689e <_strtol_l.isra.0+0xce>
   d689c:	4240      	negs	r0, r0
   d689e:	2a00      	cmp	r2, #0
   d68a0:	d0f7      	beq.n	d6892 <_strtol_l.isra.0+0xc2>
   d68a2:	b10e      	cbz	r6, d68a8 <_strtol_l.isra.0+0xd8>
   d68a4:	f10c 31ff 	add.w	r1, ip, #4294967295
   d68a8:	6011      	str	r1, [r2, #0]
   d68aa:	e7f2      	b.n	d6892 <_strtol_l.isra.0+0xc2>
   d68ac:	2430      	movs	r4, #48	; 0x30
   d68ae:	2b00      	cmp	r3, #0
   d68b0:	d1b3      	bne.n	d681a <_strtol_l.isra.0+0x4a>
   d68b2:	2308      	movs	r3, #8
   d68b4:	e7b1      	b.n	d681a <_strtol_l.isra.0+0x4a>
   d68b6:	2c30      	cmp	r4, #48	; 0x30
   d68b8:	d0a4      	beq.n	d6804 <_strtol_l.isra.0+0x34>
   d68ba:	230a      	movs	r3, #10
   d68bc:	e7ad      	b.n	d681a <_strtol_l.isra.0+0x4a>
   d68be:	bf00      	nop
   d68c0:	000d6b83 	.word	0x000d6b83

000d68c4 <strtol>:
   d68c4:	4613      	mov	r3, r2
   d68c6:	460a      	mov	r2, r1
   d68c8:	4601      	mov	r1, r0
   d68ca:	4802      	ldr	r0, [pc, #8]	; (d68d4 <strtol+0x10>)
   d68cc:	6800      	ldr	r0, [r0, #0]
   d68ce:	f7ff bf7f 	b.w	d67d0 <_strtol_l.isra.0>
   d68d2:	bf00      	nop
   d68d4:	2003e580 	.word	0x2003e580

000d68d8 <dynalib_user>:
   d68d8:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d68e8:	00000000 63726f46 6e412065 676f6c61     ....Force Analog
   d68f8:	6c615620 203a6575 61006925 00007070      Value: %i.app..

000d6908 <_ZTVN5spark10LogHandlerE>:
	...
   d6918:	000d40a1 000d40c5                       .@...@..

000d6920 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d6928:	000d40d1 000d4105 000d5769 000d40c7     .@...A..iW...@..

000d6938 <_ZTVN5spark13EthernetClassE>:
	...
   d6940:	000d47b3 000d47a9 000d479f 000d4795     .G...G...G...G..
   d6950:	000d4789 000d477d 000d4771 000d4769     .G..}G..qG..iG..
   d6960:	000d475f 000d4755 000d6061 64756162     _G..UG..a`..baud
   d6970:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
   d6980:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
   d6990:	72656c64 31302500 00207530 2500205d     dler.%010u .] .%
   d69a0:	202c0064 3a292800 5b200020 646f6300     d., .(): . [.cod
   d69b0:	203d2065 74656400 736c6961 00203d20     e = .details = .
   d69c0:	6d000a0d 66006300 006e6c00 74006e66     ...m.c.f.ln.fn.t
   d69d0:	646f6300 65640065 6c696174 00000000     .code.detail....

000d69e0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d69e8:	000d4b27 000d4b4d 000d4b0d 000d6177     'K..MK...K..wa..

000d69f8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d6a00:	000d4f91 000d4fa9 000d5769 000d40c7     .O...O..iW...@..

000d6a10 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d6a18:	000d4fbd 000d4fd1 000d590d 000d4b15     .O...O...Y...K..

000d6a28 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d6a30:	000d4b25 000d4b5b 000d56a5 000d4b17     %K..[K...V...K..

000d6a40 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d6a48:	000d4b23 000d4b69 000d4ed9 000d4b85     #K..iK...N...K..
   d6a58:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d6a68:	007a2553 74637361 00656d69              S%z.asctime.

000d6a74 <_ZTV9IPAddress>:
	...
   d6a7c:	000d5c09 000d5bf9 000d5bfb              .\...[...[..

000d6a88 <_ZTV9USBSerial>:
	...
   d6a90:	000d5cdf 000d5d47 000d5d1d 000d4a01     .\..G]...]...J..
   d6aa0:	000d5d0f 000d5ce1 000d5cf1 000d5d41     .]...\...\..A]..
   d6ab0:	000d5d01 000d5cdb                       .]...\..

000d6ab8 <_ZTV11USARTSerial>:
	...
   d6ac0:	000d5df1 000d5e5d 000d5e35 000d4a01     .]..]^..5^...J..
   d6ad0:	000d5e05 000d5e21 000d5e13 000d5e2f     .^..!^...^../^..
   d6ae0:	000d5df3 000d5df7                       .]...]..

000d6ae8 <_ZTV7TwoWire>:
	...
   d6af0:	000d5f01 000d5f4b 000d5f23 000d5f03     ._..K_..#_..._..
   d6b00:	000d5f2b 000d5f33 000d5f3b 000d5f43     +_..3_..;_..C_..

000d6b10 <_ZTVN5spark9WiFiClassE>:
	...
   d6b18:	000d5fdb 000d5fd1 000d5fc7 000d5f7d     ._..._..._..}_..
   d6b28:	000d5fbb 000d5faf 000d5fa3 000d5f9b     ._..._..._..._..
   d6b38:	000d5f91 000d5f87 000d6061              ._..._..a`..

000d6b44 <_ZTVN5spark12NetworkClassE>:
	...
   d6b4c:	000d5ff9 000d6003 000d600d 000d6017     ._...`...`...`..
   d6b5c:	000d6021 000d602d 000d6039 000d6045     !`..-`..9`..E`..
   d6b6c:	000d604d 000d6057 000d6061 75007525     M`..W`..a`..%u.u
   d6b7c:	78343025                                 %04x.

000d6b81 <_ZSt7nothrow>:
	...

000d6b82 <_ctype_>:
   d6b82:	20202000 20202020 28282020 20282828     .         ((((( 
   d6b92:	20202020 20202020 20202020 20202020                     
   d6ba2:	10108820 10101010 10101010 10101010      ...............
   d6bb2:	04040410 04040404 10040404 10101010     ................
   d6bc2:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6bd2:	01010101 01010101 01010101 10101010     ................
   d6be2:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d6bf2:	02020202 02020202 02020202 10101010     ................
   d6c02:	00000020 00000000 00000000 00000000      ...............
	...

000d6c83 <link_const_variable_data_end>:
	...

000d6c84 <link_constructors_location>:
   d6c84:	000d428d 	.word	0x000d428d
   d6c88:	000d47bd 	.word	0x000d47bd
   d6c8c:	000d4805 	.word	0x000d4805
   d6c90:	000d49d9 	.word	0x000d49d9
   d6c94:	000d5759 	.word	0x000d5759
   d6c98:	000d5a81 	.word	0x000d5a81
   d6c9c:	000d5ab9 	.word	0x000d5ab9
   d6ca0:	000d5fe5 	.word	0x000d5fe5
   d6ca4:	000d6135 	.word	0x000d6135

000d6ca8 <link_constructors_end>:
	...
